* DEPRECATE?


* Apollo-overtone restart essentials
:PROPERTIES:
:ID:       DFFB3F5A-370C-4D2A-BA61-685E4B73CCAC
:VISIBILITY: content
:END:

** stop all sound

#+BEGIN_SRC clojure
(stop)
#+END_SRC

#+RESULTS:
: nil


** record all sound
#+BEGIN_SRC clojure :results silent
(recording-start "~/Desktop/goldberg-2016-1.wav")
#+END_SRC

#+BEGIN_SRC clojure :results silent
(recording-start "~/Desktop/goldberg-2016-2.wav")
#+END_SRC

#+BEGIN_SRC clojure :results silent
(recording-start "~/Desktop/goldberg-2017-1.wav")
#+END_SRC

#+BEGIN_SRC clojure :results silent
(recording-start "~/Desktop/yancey-2016-1.wav")
#+END_SRC

#+BEGIN_SRC clojure :results silent
(recording-stop)
#+END_SRC


** use overtone.core, connect to external

#+BEGIN_SRC clojure :results silent
(use 'overtone.core)
;; will appear to time out but all is well--check below
#+END_SRC

#+BEGIN_SRC clojure :results silent
(connect-external-server)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo (sin-osc))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(use 'overtone.live)
#+END_SRC


** loaded buffers (with overview notes)
:PROPERTIES:
:ID:       19C65970-C333-4D09-AD7B-31C158D9C120
:END:

*** load all apollo soundfiles into overtone
:PROPERTIES:
:ID:       C99A4AE2-B22E-4F21-88B8-E64B3CC4D6E2
:END:

**** preferred sequence for loading apollo and other incarnation samples
:PROPERTIES:
:ID:       62220D41-AE0A-4D5F-B2D6-6B100610A89B
:END:
#+BEGIN_SRC clojure :results silent

(def path-to-sounds "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/")
(def path-to-mono (str path-to-sounds "sounds/all-mono/"))
#+END_SRC

#+BEGIN_SRC clojure
  (def variation1 (load-sample (str path-to-mono "apollo-variation1-mono.wav")))
  (def variation2 (load-sample (str path-to-mono "apollo-variation2-mono.wav")))
  (def apotheose (load-sample (str path-to-mono "apotheose-mono.wav")))
  (def calliope (load-sample (str path-to-mono "calliope-mono.wav")))
  (def coda (load-sample (str path-to-mono "coda-mono.wav")))
  (def yancey  (load-sample (str path-to-mono "how-long-slowest-mono.wav")))
  (def naissance (load-sample (str path-to-mono "naissance-mono.wav")))
  (def pas-daction (load-sample (str path-to-mono "pas-daction-real-mono.wav")))
  (def pas-deux (load-sample (str path-to-mono "pas-de-deux-mono1.wav")))
  (def polymnie (load-sample (str path-to-mono "polymnie-mono.wav")))
  (def terpsichore (load-sample (str path-to-mono "terpsichore-mono.wav")))
  ;; not in all-mono dir?
  (def goldberg-slow (load-sample "~/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))
  (def irma (load-sample (str path-to-sounds "sounds/full-time-mono.wav")))


#+END_SRC

#+RESULTS:
: #'user/variation1#'user/variation2#'user/apotheose#'user/calliope#'user/coda#'user/yancey#'user/naissance#'user/pas-daction#'user/pas-deux#'user/polymnie#'user/terpsichore#'user/goldberg-slow#'user/irma


**** load single buffers
#+BEGIN_SRC clojure :results silent
(def variation1 (load-sample (str path-to-mono "apollo-variation1-mono.wav")))
#+END_SRC

#+BEGIN_SRC clojure
(def yancey (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/how-long-slowest-mono.wav"))

#+END_SRC

#+BEGIN_SRC clojure
  (def irma (load-sample (str path-to-sounds "sounds/full-time-mono.wav"))))
#+END_SRC

#+RESULTS:


**** shorthand buffer mnemonics
Where should we put Goldberg?
0.
1. solo violin (variation1)
2. big forte three chords (open-closed fist--variation2)
3. "morendo" (apotheose)
4. spikey 6/8 (calliope)
5. uptemp coda (flipside, pre-apotheose)
6. yancey 
7. very opening, string sixteenth dotted-eighth (naissance)
8. gentle, pre pas-de-deux (pas d'action)
9. gradual tenutos (pas-de-deux)
10. bright, sixteenth note runs (polymnie)
11. spiky sixteenth dotted-eighth (terpsichore)
12. 
13. 
14. 


*** basic loading and playback                                :play:buffer:

#+BEGIN_SRC clojure :results silent
(def goldberg-slow (load-sample "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))

;; see load all below
;; (def yancey (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/how-long-slowest-mono.wav"))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(definst play [b 0] (play-buf 1 b))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  ;; (in-ns 'user)
  (play)
#+END_SRC

#+BEGIN_SRC clojure
  (def violin-solo-var1 (play 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def bjork-chords-var2 (play 1))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def pickup-flipside-apoth   (play 2))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def spiky-triplets-calliope   (play 3))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def uptempo-coda (play 4))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def yanc (play 5))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def opening-unison-naissance (play 6))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def gentle-predeux-action (play 7))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def pasdeux (play 8))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def scherzic-polymnie (play 9))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def spiky-terpsichore (play 10))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def gold-slow (play 11))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (def irma-mp3 (play 12))

#+END_SRC


*** various buffer infos

**** buffer id
#+BEGIN_SRC clojure 
(buffer-id variation1)
(buffer-id variation2)
(buffer-id apotheose)
(buffer-id calliope)
(buffer-id coda)
(buffer-id yancey)
(buffer-id naissance)
(buffer-id pas-daction)
(buffer-id pas-deux)
(buffer-id polymnie)
(buffer-id terpsichore)
(buffer-id goldberg-slow)
(buffer-id irma)
#+END_SRC

#+RESULTS:
: 123456789101112


**** [#A] full info
#+BEGIN_SRC clojure :results output
(for [name [variation1 variation2 apotheose calliope coda yancey naissance pas-daction pas-deux polymnie terpsichore goldberg-slow irma]]
(do  (pprint name) (println)))
#+END_SRC

#+RESULTS:
#+begin_example
{:id 1,
 :size 7658496,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@4bd2aa6c: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/apollo-variation1-mono.wav",
 :args {},
 :name "apollo-variation1-mono.wav",
 :rate-scale 1.0,
 :duration 173.66204081632654,
 :n-samples 7658496}

{:id 2,
 :size 7216896,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@608be141: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/apollo-variation2-mono.wav",
 :args {},
 :name "apollo-variation2-mono.wav",
 :rate-scale 1.0,
 :duration 163.64843537414967,
 :n-samples 7216896}

{:id 3,
 :size 8620032,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@4d530c8a: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/apotheose-mono.wav",
 :args {},
 :name "apotheose-mono.wav",
 :rate-scale 1.0,
 :duration 195.4655782312925,
 :n-samples 8620032}

{:id 4,
 :size 4876288,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@142fc985: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/calliope-mono.wav",
 :args {},
 :name "calliope-mono.wav",
 :rate-scale 1.0,
 :duration 110.57342403628118,
 :n-samples 4876288}

{:id 5,
 :size 7805824,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@3ad9b505: :live>,
 :path "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/coda-mono.wav",
 :args {},
 :name "coda-mono.wav",
 :rate-scale 1.0,
 :duration 177.0028117913832,
 :n-samples 7805824}

{:id 6,
 :size 12036573,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@135beb7c: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/how-long-slowest-mono.wav",
 :args {},
 :name "how-long-slowest-mono.wav",
 :rate-scale 1.0,
 :duration 272.9381632653061,
 :n-samples 12036573}

{:id 7,
 :size 12697600,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@57f1c1d: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/naissance-mono.wav",
 :args {},
 :name "naissance-mono.wav",
 :rate-scale 1.0,
 :duration 287.9274376417234,
 :n-samples 12697600}

{:id 8,
 :size 12649472,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@34c40340: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/pas-daction-real-mono.wav",
 :args {},
 :name "pas-daction-real-mono.wav",
 :rate-scale 1.0,
 :duration 286.8360997732426,
 :n-samples 12649472}

{:id 9,
 :size 10633344,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@1216892f: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/pas-de-deux-mono1.wav",
 :args {},
 :name "pas-de-deux-mono1.wav",
 :rate-scale 1.0,
 :duration 241.11891156462585,
 :n-samples 10633344}

{:id 10,
 :size 3202816,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@1e768dc8: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/polymnie-mono.wav",
 :args {},
 :name "polymnie-mono.wav",
 :rate-scale 1.0,
 :duration 72.62621315192743,
 :n-samples 3202816}

{:id 11,
 :size 5381632,
 :n-channels 2,
 :rate 44100.0,
 :status #<Atom@68de4551: :live>,
 :path
 "/Users/b/Dropbox/AB-local/sc-sounds/all-mono/terpsichore-mono.wav",
 :args {},
 :name "terpsichore-mono.wav",
 :rate-scale 1.0,
 :duration 122.03247165532879,
 :n-samples 10763264}

{:id 12,
 :size 8138240,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@4446018d: :live>,
 :path
 "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav",
 :args {},
 :name "goldberg-slow-mono.wav",
 :rate-scale 1.0,
 :duration 184.540589569161,
 :n-samples 8138240}

{:id 13,
 :size 7564032,
 :n-channels 1,
 :rate 44100.0,
 :status #<Atom@5531d516: :live>,
 :path "/Users/b/Dropbox/AB-local/sc-sounds/full-time-mono.wav",
 :args {},
 :name "full-time-mono.wav",
 :rate-scale 1.0,
 :duration 171.52,
 :n-samples 7564032}

#+end_example


**** basic buffer-info                                       :buffer:info:
#+BEGIN_SRC clojure :results output
  (for [name [variation1 variation2 apotheose calliope coda yancey naissance pas-daction pas-deux polymnie terpsichore goldberg-slow irma]]
  (do  (pprint (buffer-info name)) (println name) (println)))

  ;; (buffer-info variation1)
  ;; (buffer-info variation2)
  ;; (buffer-info apotheose)
  ;; (buffer-info calliope)
  ;; (buffer-info coda)
  ;; (buffer-info yancey)
  ;; (buffer-info naissance)
  ;; (buffer-info pas-daction)
  ;; (buffer-info pas-deux)
  ;; (buffer-info polymnie)
  ;; (buffer-info terpsichore)

#+END_SRC

#+RESULTS:
#+begin_example
{:id 0,
 :size 7658496,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 7658496,
 :rate-scale 1.0,
 :duration 173.66204081632654}
#<buffer[live]: apollo-variation1-mono.wav 173.662041s mono 0>

{:id 1,
 :size 7216896,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 7216896,
 :rate-scale 1.0,
 :duration 163.64843537414967}
#<buffer[live]: apollo-variation2-mono.wav 163.648435s mono 1>

{:id 2,
 :size 8620032,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 8620032,
 :rate-scale 1.0,
 :duration 195.4655782312925}
#<buffer[live]: apotheose-mono.wav 195.465578s mono 2>

{:id 3,
 :size 4876288,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 4876288,
 :rate-scale 1.0,
 :duration 110.57342403628118}
#<buffer[live]: calliope-mono.wav 110.573424s mono 3>

{:id 4,
 :size 7805824,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 7805824,
 :rate-scale 1.0,
 :duration 177.0028117913832}
#<buffer[live]: coda-mono.wav 177.002812s mono 4>

{:id 5,
 :size 12036573,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 12036573,
 :rate-scale 1.0,
 :duration 272.9381632653061}
#<buffer[live]: how-long-slowest-mono.wav 272.938163s mono 5>

{:id 6,
 :size 12697600,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 12697600,
 :rate-scale 1.0,
 :duration 287.9274376417234}
#<buffer[live]: naissance-mono.wav 287.927438s mono 6>

{:id 7,
 :size 12649472,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 12649472,
 :rate-scale 1.0,
 :duration 286.8360997732426}
#<buffer[live]: pas-daction-real-mono.wav 286.836100s mono 7>

{:id 8,
 :size 10633344,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 10633344,
 :rate-scale 1.0,
 :duration 241.11891156462585}
#<buffer[live]: pas-de-deux-mono1.wav 241.118912s mono 8>

{:id 9,
 :size 3202816,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 3202816,
 :rate-scale 1.0,
 :duration 72.62621315192743}
#<buffer[live]: polymnie-mono.wav 72.626213s mono 9>

{:id 10,
 :size 5381632,
 :n-channels 2,
 :rate 44100.0,
 :n-samples 10763264,
 :rate-scale 1.0,
 :duration 122.03247165532879}
#<buffer[live]: terpsichore-mono.wav 122.032472s stereo 10>

{:id 11,
 :size 8138240,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 8138240,
 :rate-scale 1.0,
 :duration 184.540589569161}
#<buffer[live]: goldberg-slow-mono.wav 184.540590s mono 11>

{:id 12,
 :size 7564032,
 :n-channels 1,
 :rate 44100.0,
 :n-samples 7564032,
 :rate-scale 1.0,
 :duration 171.52}
#<buffer[live]: full-time-mono.wav 171.520000s mono 12>

#+end_example


**** buffer-size
#+BEGIN_SRC clojure
(buffer-size variation1)
(buffer-size variation2)
(buffer-size apotheose)
(buffer-size calliope)
(buffer-size coda)
(buffer-size yancey)
(buffer-size naissance)
(buffer-size pas-daction)
(buffer-size pas-deux)
(buffer-size polymnie)
(buffer-size terpsichore)

#+END_SRC



*** irma thomas

#+BEGIN_SRC clojure :results silent
(def irma (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/full-time-mono.wav"))
#+END_SRC


*** link to sample directories
[[file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/][file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/]]



** keyboard macro to stop sound
:PROPERTIES:
:ID:       94F9064E-DB8E-4897-A6C2-94467527BAED
:END:

#+BEGIN_SRC elisp :results silent
(fset 'kill-overtone-from-buffer
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([67108896 67108896 134217788 3 22 14 3 3 21 67108896 12] 0 "%d")) arg)))
   
(global-set-key [s-f7] 'kill-overtone-from-buffer)

#+END_SRC

#+BEGIN_SRC elisp :results silent
;; Keyboard Macro Editor.  Press C-c C-c to finish; press C-x k RET to cancel.
;; Original keys: 2*C-SPC M-< C-c C-v C-n C-c C-c C-u C-SPC C-l

Command: last-kbd-macro
Key: none

Macro:

2*C-SPC			;; set-mark-command
M-<			;; beginning-of-buffer
C-c C-v C-n		;; org-babel-next-src-block
C-c C-c C-u
C-SPC			;; set-mark-command
C-l			;; recenter-top-bottom

#+END_SRC


** confirm MIDI controller connected

#+BEGIN_SRC clojure :results silent
(midi-connected-devices)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(event-debug-on)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(event-debug-off)
#+END_SRC


** define 32 atoms for two sets of channels and CC messages
:PROPERTIES:
:ID:       B3DB9C3B-4F2B-40D4-B16C-DF3047C968D9
:END:

MOVED?? To acatalectic?

[[id:F14EC44C-04DE-4611-B8C0-9D5355536765][control channel atoms aplenty, with accompanying ~on-event~]]


** monitor current state of refs
:PROPERTIES:
:ID:       119605DE-9AD4-4818-B921-3E6B76396D6C
:END:
#+BEGIN_SRC clojure
  (list 'Channel-one
        'KNOBS @cc1-1 @cc2-1 @cc3-1 @cc4-1 @cc5-1 @cc6-1 @cc7-1 @cc8-1
        'PADS @pad1-1 @pad2-1 @pad3-1 @pad4-1 @pad5-1 @pad6-1 @pad7-1 @pad8-1
        'Channel-two
        'KNOBS
        @cc1-2 @cc2-2 @cc3-2 @cc4-2 @cc5-2 @cc6-2 @cc7-2 @cc8-2
        'PADS @pad1-2 @pad2-2 @pad3-2 @pad4-2 @pad5-2 @pad6-2 @pad7-2 @pad8-2)
#+END_SRC

#+RESULTS:
| Channel-one | KNOBS | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | PADS | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | Channel-two | KNOBS | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | PADS | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |


* begin making sound with sound files
  :PROPERTIES:
  :header-args: :results silent
  :END:

** note: most of this current (apollo-overtone?) file is now to be archived

see final-tgrain-controller-abstraction.org 

[[id:72B246E0-F6CF-4AC8-8113-C1CE8F83572B][preliminaries]] this is really just loading apollo soundfiles as (probably already) done above. 

Move on to synthdefs below.

And consider closing this file? Useful at least to refer back to
buffer info


** consider what synths to use
[[id:94621238-5BF8-497B-96CE-8E1CB951311A][define synths (taken from =granular-synth-focused.org=)]]

- general-tgrains :: used by all the event-handlers below??
- general-tgrains-synth :: preferred in later files; uses =out=
- tgrains-line-synth ::
- slow-grain-reverb ::
- general-trand-synth- :: 


** def an instrument for playing with parameters to TGrains
:PROPERTIES:
:ID:       F2B83957-0823-4B8B-A77A-4F7D8080B0B9
:END:
mono output, should use pan2
#+BEGIN_SRC clojure
    (definst general-tgrains [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
      (let [trate trate
            dur (/ dur-numerator trate)
            clk (impulse:ar trate)
            centerpos centerpos]
        (t-grains:ar 1 clk buffer 1 centerpos dur 0 amp 2)))
#+END_SRC


** add cc control to t-grains (trate with CC, pos with Mouse-x)

#+BEGIN_SRC clojure :results silent
(general-tgrains 0 :trate 0.4 :amp 0.4)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(general-tgrains 1 :trate 0.1)
#+END_SRC

examples of centerpos arguments and trate arguments!

#+BEGIN_SRC clojure :results silent
[centerpos-mouse (mouse-x:kr 0 (buf-dur:kr b))]
[centerpos-line  (line 0 (buf-dur:kr 0) 500) ]
#+END_SRC


* make abstraction for playing with CC and granular synth
:PROPERTIES:
:ID:       EEEBABF7-6A2A-4B1A-9D57-D1C8E0D42E72
:VISIBILITY: content
:END:

** preliminaries
- define atoms for two sets of channels and CC messages (see 'restart'
  section above)


** Confirm current channel number
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
            (if (= chan 1) (println chan) (println chan))
             )
::cc-state-if)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::cc-state-if)
#+END_SRC


** [#A] build large event handler (using "on-event")
*** hide largest on-event template (respond to CC on channel 1 or other)
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
              (if (= chan 1)
                (cond (= cc-channel 1) (reset! cc1-1 val)
                      (= cc-channel 2) (reset! cc2-1 val)
                      (= cc-channel 3) (reset! cc3-1 val)
                      (= cc-channel 4) (reset! cc4-1 val)
                      (= cc-channel 5) (reset! cc5-1 val)
                      (= cc-channel 6) (reset! cc6-1 val)
                      (= cc-channel 7) (reset! cc7-1 val)
                      (= cc-channel 8) (reset! cc8-1 val)
                      )
                (cond (= cc-channel 1) (reset! cc1-2 val)
                      (= cc-channel 2) (reset! cc2-2 val)
                      (= cc-channel 3) (reset! cc3-2 val)
                      (= cc-channel 4) (reset! cc4-2 val)
                      (= cc-channel 5) (reset! cc5-2 val)
                      (= cc-channel 6) (reset! cc6-2 val)
                      (= cc-channel 7) (reset! cc7-2 val)
                      (= cc-channel 8) (reset! cc8-2 val)
                      )))
              ::large-cc-state)
          
          
#+END_SRC


#+BEGIN_SRC clojure :results silent
(remove-event-handler ::large-cc-state)
#+END_SRC

*** view current state
#+BEGIN_SRC clojure :results silent
(list 'Channel-one  @cc1-1 @cc2-1 @cc3-1 @cc4-1 @cc5-1 @cc6-1 @cc7-1 @cc8-1 'Channel-two @cc1-2 @cc2-2 @cc3-2 @cc4-2 @cc5-2 @cc6-2 @cc7-2 @cc8-2)
#+END_SRC


#+BEGIN_SRC clojure :results silent
(str "cc1-1: " @cc1-1 " cc2-1: " @cc2-1 " cc3-1: " @cc3-1 " cc4-1: " @cc4-1 " cc5-1: " @cc5-1 " cc6-1: " @cc6-1 " cc7-1: " @cc7-1 " cc8-1: " \n @cc8-1 " cc1-2: " @cc1-2 @cc2-2 @cc3-2 @cc4-2 @cc5-2 @cc6-2 @cc7-2 @cc8-2)
#+END_SRC


*** println CC-knob values and assign to SLOW-GRAIN-REVERB parameters

Requires slow-grain-reverb to be playing
[[id:F109AE32-4289-4A8B-8637-B68D7B4FA5B6][SLOW-GRAIN-REVERB: dedicated instrument abstraction for t-grains synths]]

#+BEGIN_SRC clojure
    (on-event [:midi :control-change]
              (fn [{cc-channel :note val :velocity chan :channel}]
                (if (= chan 1)
                  (cond (= cc-channel 1) (do (reset! cc1-1 (+ 1 (* val @cc5-1)))
                                             (ctl slow-grain-reverb :centerpos @cc1-1))
                        (= cc-channel 2) (do (reset! cc2-1 (+ 1 (* val @cc6-1)))
                                             (ctl slow-grain-reverb :centerpos @cc2-1))
                        (= cc-channel 3) (do (reset! cc3-1 (+ 1 (* val @cc7-1)))
                                             (ctl slow-grain-reverb :centerpos @cc3-1))
                        (= cc-channel 4) (do (reset! cc4-1 (+ 1 (* val @cc8-1)))
                                             (ctl slow-grain-reverb :centerpos @cc4-1))
                        (= cc-channel 5) (reset! cc5-1 val)
                        (= cc-channel 6) (reset! cc6-1 val)
                        (= cc-channel 7) (reset! cc7-1 val)
                        (= cc-channel 8) (reset! cc8-1 val)
                        ))
                (if (= chan 2)
                  (cond (= cc-channel 1) (do (reset! cc1-2 (scale-range val 1 127 0 1))
                                             (ctl slow-grain-reverb :grain-dur @cc1-2))
                        (= cc-channel 2) (do (reset! cc2-2 (scale-range val 1 127 1 2))
                                             (ctl slow-grain-reverb :centerpos @cc2-2))
                        (= cc-channel 3) (do (reset! cc3-2 (scale-range val 1 127 0 1))
                                             (ctl slow-grain-reverb :trigger-rate @cc3-2))
                        (= cc-channel 4) (do (reset! cc4-2 (+ 1 (* val @cc8-2)))
                                             (ctl slow-grain-reverb :centerpos @cc4-2)
                                             (println @cc4-2))
                        (= cc-channel 5)  (do (reset! cc5-2 val) 
                                             (println "@cc5-2:" @cc5-2))
                        (= cc-channel 6) (do (reset! cc6-2 val) 
                                             (println "@cc6-2:" @cc6-2))
                        (= cc-channel 7) (do (reset! cc7-2 val) 
                                             (println "@cc7-2:" @cc7-2))
                        (= cc-channel 8) (do (reset! cc8-2 val) 
                                             (println "@cc8-2:" @cc8-2))
                        )))              
  ::interdependent-knobs)
  ;; pseudo-code


#+END_SRC

#+RESULTS:
: :added-async-handler


#+BEGIN_SRC clojure :results silent
(remove-event-handler ::interdependent-knobs)
#+END_SRC

*** simple example of using RESET! and CTL on a noise synth
#+BEGIN_SRC clojure :results silent

    (on-event [:midi :control-change]
              (fn [{cc-channel :note vel :velocity}]
                (cond (= cc-channel 1) (do (reset! ffl (/ vel 127 )) 
                                           (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1)))
                      (= cc-channel 2) (do (reset! ffh (* vel 10))
                                           (ctl someother-fnoise :ffreq (scale-range vel 1 127 @ffl @ffh)))
                      ))
              ::someother-pooper-do)

#+END_SRC


* overtone abstraction templates GOOD

** simple CC synth control function--takes any SYNTH as an argument
- sequence of 
#+BEGIN_SRC clojure :results silent
(defn make-synth-ctl [synth midi-channel synth-param]
  (fn [{cc-channel :note val :velocity chan :channel}]
    (if (= chan midi-channel)
      (cond (= cc-channel 1) (do (reset! cc1-1 (* (inc val) @cc5-1))
                                 (ctl synth (keyword synth-param) @cc1-1)
                                 (println "cc1-1:" @cc1-1))))))

(on-event [:midi :control-change]
          (make-synth-ctl slow-grain-reverb 1 'centerpos)
          :abstraction-cc-synth)

(slow-grain-reverb)
#+END_SRC

#+BEGIN_SRC clojure
(remove-event-handler ::abstraction-cc-synth)
#+END_SRC

#+RESULTS:
: :handler-removed


** simple TGrains variations function--use general-tgrains above
    args to general-tgrains [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]


** customize CC synth control for exacting centerpos work
#+BEGIN_SRC clojure :results silent
;; copied from above
  (defn make-synth-ctl [synth midi-channel synth-param]
    (fn [{cc-channel :note val :velocity chan :channel}]
      (if (= chan midi-channel)
        (cond (= cc-channel 1) (do (reset! cc1-1 val)
                                   (ctl synth (keyword synth-param) @cc1-1)
                                   (println "cc1-1:" @cc1-1))
              ))))

  (defn make-synth-ctl-pads [synth midi-channel synth-param]
    (fn [{cc-channel :note val :velocity chan :channel}]
      (if (= chan midi-channel)
        (cond (= cc-channel 40) (do (swap! pad5-1 inc)
                                   (ctl synth (keyword synth-param) @pad5-1)
                                   (println "pad5-1:" @pad5-1))
              ))))



  (on-event [:midi :control-change]
            (make-synth-ctl general-tgrains 1 'centerpos)
            :abstraction-cc-synth)

  (on-event [:midi :note-on]
            (make-synth-ctl-pads general-tgrains 1 'centerpos)
            :abstraction-cc-synth-pad)


#+END_SRC

#+BEGIN_SRC clojure :results silent
  (general-tgrains 0)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl general-tgrains :centerpos 100)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl general-tgrains :centerpos 1)
#+END_SRC



** full knob and pad abstraction
:PROPERTIES:
:ID:       C945047A-E0FD-439C-9354-6F8CA4989DAE
:END:
#+BEGIN_SRC clojure
;;; N.B. passing in the buffer num isn't ideal!
  (defn reset-knob [synth buffer-num synth-param knob-number place midi-channel & {:keys [scale]
                                                                        :or {scale 1}}]
      (fn [{knob :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= knob knob-number)
                (do (reset! place (* val scale))
                    (ctl synth (keyword buffer) buffer-num (keyword synth-param) (deref place))
                    (println (str synth-param knob-number " : ") (deref place)))))))

#+END_SRC

#+RESULTS:
: #'user/reset-knob

#+BEGIN_SRC clojure
;;; N.B. passing in the buffer num isn't ideal!
  (defn swap-pad [synth buffer-num synth-param pad-number place swap-fn midi-channel]
      (fn [{pad :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= pad pad-number)
                (do (swap! place swap-fn)
                    (ctl synth (keyword buffer) buffer-num (keyword synth-param) (deref place))
                    (println (str synth-param pad-number " : ") (deref place)))))))
    
#+END_SRC

#+RESULTS:
: #'user/swap-pad


** play goldberg with general-tgrains granular synth
:PROPERTIES:
:ID:       AD3B833A-363B-410D-A18E-348F8D7D4182
:END:
#+BEGIN_SRC clojure :results silent
(general-tgrains 0)
#+END_SRC


** play yancey
:PROPERTIES:
:ID:       44B87F5F-FCA4-4451-A91C-A2DCD2F9F714
:END:
#+BEGIN_SRC clojure :results silent
(general-tgrains 1)
#+END_SRC



** [#C] use "reset-knob" and "swap-pad" to control "general-tgrains"
   :PROPERTIES:
   :ID:       A2DF787F-8A56-4C27-A637-257E7B32DE58
   :END:


WHAT IF GENERAL-TGRAINS is /not running?/


this says: 
control the "centerpos" argument of the "general-tgrains" synth using
"knob 1" (which uses the "cc1-1" var to hold its current state) when
it is being controlled on channel 1

But needs an event handler to actually respond to cc-messages! see
"on-events" below

#+BEGIN_SRC clojure :results silent
;; note that we are passing single numbers to the synth-parameters arguments
;; ideally, we will get these values automatically from "state"
(reset-knob general-tgrains :centerpos 1 cc1-1 1)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(reset-knob general-tgrains :centerpos 1 cc1-1 1)
(swap-pad general-tgrains :centerpos 36 pad1-1 inc 1)
(swap-pad general-tgrains :centerpos 37 pad2-1 dec 1)
#+END_SRC



** [#B] create event-handlers for general-tgrains
   :PROPERTIES:
   :ID:       B9D96AE8-B82E-4C20-BB93-AE27E6232D53
   :END:

*** define control-change knobs 

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (reset-knob general-tgrains :buffer 0 :amp 2 cc2-1 1 :scale 0.01)
            ::amp-knob2)

  (on-event [:midi :control-change]
            (reset-knob general-tgrains :buffer 0 :centerpos 1 cc1-1 1 :scale 0.5)
            ::centerpos-knob1)
#+END_SRC

*** define pads
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :centerpos 38 pad3-1 inc 1)
            ::centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :centerpos 39 pad3-1 dec 1)
            ::centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :dur-numerator 36 pad1-1 inc 1)
            ::durnumerator-pad1)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :dur-numerator 37 pad1-1 dec 1)
            ::durnumerator-pad2)

(on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :trate 42 pad7-1 (fn [x] (+ 0.1 x)) 1)
            ::trate-pad7-inc)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :trate 43 pad7-1 (fn [x] (- x 0.1)) 1)
            ::trate-pad8-dec)
#+END_SRC

*** remove event handlers for goldberg

#+BEGIN_SRC clojure
(remove-event-handler ::amp-knob2)
(remove-event-handler ::centerpos-knob1)
(remove-event-handler ::centerpos-pad3-inc)
(remove-event-handler ::centerpos-pad4-dec)
(remove-event-handler ::durnumerator-pad1)
(remove-event-handler ::durnumerator-pad2)
(remove-event-handler ::trate-pad7-inc)
(remove-event-handler ::trate-pad8-dec)
#+END_SRC

#+RESULTS:
: :handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed


* systematically create event-handlers for general-tgrains on channels 1 and 2
:PROPERTIES:
:ID:       F51E8E40-9886-45B3-A06F-7C64DAD2FE7A
:VISIBILITY: children
:END:

** uses abstractions defined above--see 'steps'
see some steps node somewhere (in more-advanced-overtone-exploring.org) 

lays out a process of
getting going with goldberg aria


** define control-change knobs for goldberg and Channel 1
:PROPERTIES:
:ID:       23951DB5-0EEC-4CB4-B949-C728F4CF2A2D
:END:

#+BEGIN_SRC clojure
  (on-event [:midi :control-change]
            (reset-knob general-tgrains :buffer 1 :amp 2 :place cc2-2 :midi-channel 2 :scale 0.01)
            ::yancey-amp-knob2)

  (on-event [:midi :control-change]
;; um, is this missing a ":place" keyword argument before cc1-2?
            (reset-knob general-tgrains :buffer 1 :centerpos 1 cc1-2 :midi-channel 2 :scale 0.5)
            ::yancey-centerpos-knob1)
#+END_SRC

#+RESULTS:
: :added-async-handler


** define pads
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :centerpos 38 pad3-1 inc 1)
            ::yancey-centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :centerpos 39 pad3-1 dec 1)
            ::yancey-centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :dur-numerator 36 pad1-1 inc 1)
            ::yancey-durnumerator-pad1)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :dur-numerator 37 pad1-1 dec 1)
            ::yancey-durnumerator-pad2)

(on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :trate 42 pad7-1 (fn [x] (+ 0.1 x)) 1)
            ::yancey-trate-pad7-inc)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :trate 43 pad7-1 (fn [x] (- x 0.1)) 1)
            ::yancey-trate-pad8-dec)
#+END_SRC


** remove event handlers for goldberg
#+BEGIN_SRC clojure
(remove-event-handler ::yancey-amp-knob2)
(remove-event-handler ::yancey-centerpos-knob1)
(remove-event-handler ::yancey-centerpos-pad3-inc)
(remove-event-handler ::yancey-centerpos-pad4-dec)
(remove-event-handler ::yancey-durnumerator-pad1)
(remove-event-handler ::yancey-durnumerator-pad2)
(remove-event-handler ::yancey-trate-pad7-inc)
(remove-event-handler ::yancey-trate-pad8-dec)
#+END_SRC


* translate goldberg and yancey to overtone

** check loaded buffers for incarnation

[[id:19C65970-C333-4D09-AD7B-31C158D9C120][make sure buffer was loaded]] as above

#+RESULTS:

Basic playback of a loaded buffer

#+BEGIN_SRC clojure :results silent
(definst playback-buf [bufname 0] (play-buf 1 bufname))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(playback-buf yancey)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(playback-buf goldberg-slow)
#+END_SRC

#+BEGIN_SRC clojure
(buffer-info goldberg-slow)
#+END_SRC

#+RESULTS:
: #<buffer-info: 184.540590s mono 0>

#+BEGIN_SRC clojure
(buffer-info yancey)
#+END_SRC

#+RESULTS:
: #<buffer-info: 272.938163s mono 1>


** supercollider yancey and goldberg synth version
#+BEGIN_SRC sclang
  (
    // add buffer argument
    SynthDef(\yancey_synth,
        {
            arg trate = 2,
            dur = 2,
            centerpos = 1000,
            // buffer = ~yancey.bufnum,
            buffer = 7,
            amp = 0.5;
            Out.ar(0, TGrains.ar(2, Impulse.ar(trate), buffer, 1, centerpos, dur, 0, amp, 2))
        }).add;
    );

  (
    // add buffer argument
    SynthDef(\goldberg_synth,
        {
            arg trate = 2,
            dur = 2,
            centerpos = 1000,
            // buffer = ~goldberg.bufnum,
            buffer = 3, 
            amp = 0.5;
            Out.ar(0, TGrains.ar(2, Impulse.ar(trate), buffer, 1, centerpos, dur, 0, amp, 2))
        }).add;
    );

// broadcasting on channel 4 
    MIDIdef.cc(\yancey_TRate, {arg args; h.set(\trate, args / 127)}, 1, 4);
    MIDIdef.cc(\yancey_Dur, {arg args; h.set(\dur, args * 0.5)}, 2, 4);

    MIDIdef.cc(\yancey_Center, {arg args; h.set(\centerpos, args * 1000)}, 3, 4);
    MIDIdef.cc(\yancey_Amp, {arg args; h.set(\amp, args / 127)}, 4, 4);

    MIDIdef.cc(\goldberg_TRate, {arg args; i.set(\trate, args / 127)}, 5, 4);
    MIDIdef.cc(\goldberg_Dur, {arg args; i.set(\dur, args * 0.5)}, 6, 4);

    MIDIdef.cc(\goldberg_Center, {arg args; i.set(\centerpos, args * 1000)}, 7, 4);
    MIDIdef.cc(\goldberg_Amp, {arg args; i.set(\amp, args / 127)}, 8, 4);

    h = Synth(\yancey_synth);

    i = Synth(\goldberg_synth);
#+END_SRC


* relevant apollo and incarnations soundfiles

** directories
[[file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/][file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/]]
[[file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/][file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/]]
[[file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/apollo-tracks/][file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/apollo-tracks/]]

** supercollider Buffer.read en masse
#+BEGIN_SRC sclang
  ~variation1 = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apollo-variation1-mono.wav");
  ~variation2 = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apollo-variation2-mono.wav");
  ~yancey = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/how-long-slowest-mono.wav");
  ~goldberg = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/goldberg-slow-mono.wav");
  ~apotheose = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apotheose-mono.wav");
  ~calliope = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/calliope-mono.wav");
  ~coda = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/coda-mono.wav");
  ~yancey = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/how-long-slowest-mono.wav");
  ~naissance = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/naissance-mono.wav");
  ~action = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/pas-d'action-mono.wav");
  ~deux = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/pas-de-deux-mono.wav");
  ~poly = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/polymnie-mono.wav");
  ~terpsichore = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/terpsichore-mono.wav");
#+END_SRC


* consolidate steps into large org blocks for restarts (in progress)

** [#B] a start (too large)

#+BEGIN_SRC clojure
  (use 'overtone.live)




  (def goldberg-slow (load-sample "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))

  (def yancey (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/how-long-slowest-mono.wav"))


  (definst general-tgrains [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator trate)
          clk (impulse:ar trate)
          centerpos centerpos]
      (t-grains:ar 1 clk buffer 1 centerpos dur 0 amp 2)))


  (def cc1-1 (atom 0))
  (def cc2-1 (atom 0))
  (def cc3-1 (atom 0))
  (def cc4-1 (atom 0))
  (def cc5-1 (atom 0))
  (def cc6-1 (atom 0))
  (def cc7-1 (atom 0))
  (def cc8-1 (atom 0))
  (def cc1-2 (atom 0))
  (def cc2-2 (atom 0))
  (def cc3-2 (atom 0))
  (def cc4-2 (atom 0))
  (def cc5-2 (atom 0))
  (def cc6-2 (atom 0))
  (def cc7-2 (atom 0))
  (def cc8-2 (atom 0))

  (def pad1-1 (atom 0))
  (def pad2-1 (atom 0))
  (def pad3-1 (atom 0))
  (def pad4-1 (atom 0))
  (def pad5-1 (atom 0))
  (def pad6-1 (atom 0))
  (def pad7-1 (atom 0))
  (def pad8-1 (atom 0))
  (def pad1-2 (atom 0))
  (def pad2-2 (atom 0))
  (def pad3-2 (atom 0))
  (def pad4-2 (atom 0))
  (def pad5-2 (atom 0))
  (def pad6-2 (atom 0))
  (def pad7-2 (atom 0))
  (def pad8-2 (atom 0))

#+END_SRC

#+RESULTS:
: nil({:description "Axiom A.I.R. Mini32 MIDI", :vendor "M-Audio", :sinks 0, :sources 2147483647, :name "MIDI", :overtone.studio.midi/full-device-key [:midi-device "M-Audio" "MIDI" "Axiom A.I.R. Mini32 MIDI" 0], :info #object[com.sun.media.sound.MidiInDeviceProvider$MidiInDeviceInfo 0x532c970a "MIDI"], :overtone.studio.midi/dev-num 0, :device #object[com.sun.media.sound.MidiInDevice 0x5762a89f "com.sun.media.sound.MidiInDevice@5762a89f"], :version "Unknown version"} {:description "Axiom A.I.R. Mini32 HyperControl", :vendor "M-Audio", :sinks 0, :sources 2147483647, :name "HyperControl", :overtone.studio.midi/full-device-key [:midi-device "M-Audio" "HyperControl" "Axiom A.I.R. Mini32 HyperControl" 0], :info #object[com.sun.media.sound.MidiInDeviceProvider$MidiInDeviceInfo 0x43848397 "HyperControl"], :overtone.studio.midi/dev-num 0, :device #object[com.sun.media.sound.MidiInDevice 0x264f265d "com.sun.media.sound.MidiInDevice@264f265d"], :version "Unknown version"})#'user/goldberg-slow#'user/yancey#<instrument: general-tgrains>#'user/cc1-1#'user/cc2-1#'user/cc3-1#'user/cc4-1#'user/cc5-1#'user/cc6-1#'user/cc7-1#'user/cc8-1#'user/cc1-2#'user/cc2-2#'user/cc3-2#'user/cc4-2#'user/cc5-2#'user/cc6-2#'user/cc7-2#'user/cc8-2#'user/pad1-1#'user/pad2-1#'user/pad3-1#'user/pad4-1#'user/pad5-1#'user/pad6-1#'user/pad7-1#'user/pad8-1#'user/pad1-2#'user/pad2-2#'user/pad3-2#'user/pad4-2#'user/pad5-2#'user/pad6-2#'user/pad7-2#'user/pad8-2

#+BEGIN_SRC clojure
    (defn reset-knob [synth synth-param knob-number place midi-channel & {:keys [scale]
                                                                          :or {scale 1}}]
        (fn [{knob :note val :velocity chan :channel}]
          (if (= chan midi-channel)
            (cond (= knob knob-number)
                  (do (reset! place (* val scale))
                      (ctl synth (keyword synth-param) (deref place))
                      (println (str synth-param knob-number " : ") (deref place)))))))




    (defn swap-pad [synth synth-param pad-number place swap-fn midi-channel]
        (fn [{pad :note val :velocity chan :channel}]
          (if (= chan midi-channel)
            (cond (= pad pad-number)
                  (do (swap! place swap-fn)
                      (ctl synth (keyword synth-param) (deref place))
                      (println (str synth-param pad-number " : ") (deref place)))))))
    


    (on-event [:midi :control-change]
              (reset-knob general-tgrains :buffer 0 :amp 2 cc2-1 1 :scale 0.01)
              ::amp-knob2)

    (on-event [:midi :control-change]
              (reset-knob general-tgrains :buffer 0 :centerpos 1 cc1-1 1 :scale 0.5)
              ::centerpos-knob1)


    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :centerpos 38 pad3-1 inc 1)
              ::centerpos-pad3-inc)

    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :centerpos 39 pad3-1 dec 1)
              ::centerpos-pad4-dec)

    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :dur-numerator 36 pad1-1 inc 1)
              ::durnumerator-pad1)

    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :dur-numerator 37 pad1-1 dec 1)
              ::durnumerator-pad2)

  (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :trate 42 pad7-1 (fn [x] (+ 0.1 x)) 1)
              ::trate-pad7-inc)

    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :trate 43 pad7-1 (fn [x] (- x 0.1)) 1)
              ::trate-pad8-dec)


    (on-event [:midi :control-change]
              (reset-knob general-tgrains :buffer 1 :amp 2 :place cc2-2 :midi-channel 2 :scale 0.01)
              ::yancey-amp-knob2)

    (on-event [:midi :control-change]
              (reset-knob general-tgrains :buffer 1 :centerpos 1 cc1-2 2 :scale 0.5)
              ::yancey-centerpos-knob1)
#+END_SRC

#+RESULTS:
: ({:description "Axiom A.I.R. Mini32 MIDI", :vendor "M-Audio", :sinks 0, :sources 2147483647, :name "MIDI", :overtone.studio.midi/full-device-key [:midi-device "M-Audio" "MIDI" "Axiom A.I.R. Mini32 MIDI" 0], :info #object[com.sun.media.sound.MidiInDeviceProvider$MidiInDeviceInfo 0x5386ff43 "MIDI"], :overtone.studio.midi/dev-num 0, :device #object[com.sun.media.sound.MidiInDevice 0x7bf18b15 "com.sun.media.sound.MidiInDevice@7bf18b15"], :version "Unknown version"} {:description "Axiom A.I.R. Mini32 HyperControl", :vendor "M-Audio", :sinks 0, :sources 2147483647, :name "HyperControl", :overtone.studio.midi/full-device-key [:midi-device "M-Audio" "HyperControl" "Axiom A.I.R. Mini32 HyperControl" 0], :info #object[com.sun.media.sound.MidiInDeviceProvider$MidiInDeviceInfo 0x77743fc8 "HyperControl"], :overtone.studio.midi/dev-num 0, :device #object[com.sun.media.sound.MidiInDevice 0x68bfe7ec "com.sun.media.sound.MidiInDevice@68bfe7ec"], :version "Unknown version"})#'user/goldberg-slow#'user/yancey#<instrument: general-tgrains>#'user/cc1-1#'user/cc2-1#'user/cc3-1#'user/cc4-1#'user/cc5-1#'user/cc6-1#'user/cc7-1#'user/cc8-1#'user/cc1-2#'user/cc2-2#'user/cc3-2#'user/cc4-2#'user/cc5-2#'user/cc6-2#'user/cc7-2#'user/cc8-2#'user/pad1-1#'user/pad2-1#'user/pad3-1#'user/pad4-1#'user/pad5-1#'user/pad6-1#'user/pad7-1#'user/pad8-1#'user/pad1-2#'user/pad2-2#'user/pad3-2#'user/pad4-2#'user/pad5-2#'user/pad6-2#'user/pad7-2#'user/pad8-2#'user/reset-knob#'user/swap-pad:added-async-handler:added-async-handler:added-async-handler:added-async-handler

** [#C] use two different channels for modifying the two different synths

buffers "gold" and "yanc" are associated with two synths, and play
back here requires switching from channel one to channel two 

Unnecessary? Inconvenient.
#+BEGIN_SRC clojure
  (on-event [:midi :control-change]
            (old-reset-knob gold :amp 2 cc2-1 1 :scale 0.01)
            ::old-amp-knob2-gold)

  (on-event [:midi :control-change]
            (old-reset-knob gold :centerpos 1 cc1-1 1 :scale 0.5)
            ::old-centerpos-knob1-gold)

  (on-event [:midi :control-change]
            (old-reset-knob yanc :amp 2 cc2-2 2 :scale 0.01)
            ::old-amp-knob2-yanc)

  (on-event [:midi :control-change]
            (old-reset-knob yanc :centerpos 1 cc1-2 2 :scale 0.5)
            ::old-centerpos-knob1-yanc)
#+END_SRC

Use one-channel but inc/dec more than two parameters per synth
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (old-swap-pad yanc :centerpos 38 pad3-1 inc 1)
            ::yancey-centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :centerpos 39 pad3-1 dec 1)
            ::yancey-centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :dur-numerator 36 pad1-1 inc 1)
            ::yancey-durnumerator-pad1)

  (on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :dur-numerator 37 pad1-1 dec 1)
            ::yancey-durnumerator-pad2)

(on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :trate 42 pad7-1 (fn [x] (+ 0.1 x)) 1)
            ::yancey-trate-pad7-inc)

  (on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :trate 43 pad7-1 (fn [x] (- x 0.1)) 1)
            ::yancey-trate-pad8-dec)
#+END_SRC

