* Apollo-overtone restart essentials
:PROPERTIES:
:ID:       DFFB3F5A-370C-4D2A-BA61-685E4B73CCAC
:END:
** stop all sound

#+BEGIN_SRC clojure
(stop)
#+END_SRC

#+RESULTS:
: nil
** record all sound
#+BEGIN_SRC clojure :results silent
(recording-start "~/Desktop/goldberg-2016-1.wav")
#+END_SRC

#+BEGIN_SRC clojure :results silent
(recording-stop)
#+END_SRC
** use overtone.core, connect to external, load buffers, define macros

#+BEGIN_SRC clojure :results silent
(use 'overtone.core)
;; will appear to time out but all is well--check below
#+END_SRC

#+BEGIN_SRC clojure :results silent
(connect-external-server)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo (sin-osc))
#+END_SRC

** make sure buffer was loaded
:PROPERTIES:
:ID:       19C65970-C333-4D09-AD7B-31C158D9C120
:END:


#+BEGIN_SRC clojure
(def goldberg-slow (load-sample "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))

(def yancey (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/how-long-slowest-mono.wav"))
#+END_SRC

#+RESULTS:
: #'user/goldberg-slow#'user/yancey




#+BEGIN_SRC clojure :results silent
(definst play [b 0] (play-buf 1 b))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(play)
(play 1)
#+END_SRC

** keyboard macro to stop sound
#+BEGIN_SRC elisp
(fset 'kill-overtone-from-buffer
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([67108896 67108896 134217788 3 22 14 3 3 21 67108896 12] 0 "%d")) arg)))
   
(global-set-key [f6] 'kill-overtone-from-buffer)

#+END_SRC

#+RESULTS:
: kill-overtone-from-buffer

#+BEGIN_SRC elisp
;; Keyboard Macro Editor.  Press C-c C-c to finish; press C-x k RET to cancel.
;; Original keys: 2*C-SPC M-< C-c C-v C-n C-c C-c C-u C-SPC C-l

Command: last-kbd-macro
Key: none

Macro:

2*C-SPC			;; set-mark-command
M-<			;; beginning-of-buffer
C-c C-v C-n		;; org-babel-next-src-block
C-c C-c C-u
C-SPC			;; set-mark-command
C-l			;; recenter-top-bottom

#+END_SRC

** confirm MIDI controller connected

#+BEGIN_SRC clojure :results silent
(event-debug-on)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(event-debug-off)
#+END_SRC

** define atoms for two sets of channels and CC messages
:PROPERTIES:
:ID:       B3DB9C3B-4F2B-40D4-B16C-DF3047C968D9
:END:
#+BEGIN_SRC clojure :results silent
  (def cc1-1 (atom 0))
  (def cc2-1 (atom 0))
  (def cc3-1 (atom 0))
  (def cc4-1 (atom 0))
  (def cc5-1 (atom 0))
  (def cc6-1 (atom 0))
  (def cc7-1 (atom 0))
  (def cc8-1 (atom 0))
  (def cc1-2 (atom 0))
  (def cc2-2 (atom 0))
  (def cc3-2 (atom 0))
  (def cc4-2 (atom 0))
  (def cc5-2 (atom 0))
  (def cc6-2 (atom 0))
  (def cc7-2 (atom 0))
  (def cc8-2 (atom 0))

  (def pad1-1 (atom 0))
  (def pad2-1 (atom 0))
  (def pad3-1 (atom 0))
  (def pad4-1 (atom 0))
  (def pad5-1 (atom 0))
  (def pad6-1 (atom 0))
  (def pad7-1 (atom 0))
  (def pad8-1 (atom 0))
  (def pad1-2 (atom 0))
  (def pad2-2 (atom 0))
  (def pad3-2 (atom 0))
  (def pad4-2 (atom 0))
  (def pad5-2 (atom 0))
  (def pad6-2 (atom 0))
  (def pad7-2 (atom 0))
  (def pad8-2 (atom 0))
#+END_SRC

** monitor current state of refs
:PROPERTIES:
:ID:       119605DE-9AD4-4818-B921-3E6B76396D6C
:END:
#+BEGIN_SRC clojure
  (list 'Channel-one 'KNOBS @cc1-1 @cc2-1 @cc3-1 @cc4-1 @cc5-1 @cc6-1 @cc7-1 @cc8-1
  'PADS
        @pad1-1 @pad2-1 @pad3-1 @pad4-1 @pad5-1 @pad6-1 @pad7-1 @pad8-1
        'Channel-two @cc1-2 @cc2-2 @cc3-2 @cc4-2 @cc5-2 @cc6-2 @cc7-2 @cc8-2)
#+END_SRC

#+RESULTS:
| Channel-one | KNOBS | 63.5 | 0.39 | 0 | 0 | 0 | 0 | 0 | 0 | PADS | 11 | 0 | 17 | 0 | 0 | 0 | 0.6 | 0 | Channel-two | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |

* begin making sound with sound files
** def an instrument for playing with parameters to TGrains
:PROPERTIES:
:ID:       F2B83957-0823-4B8B-A77A-4F7D8080B0B9
:END:
#+BEGIN_SRC clojure
    (definst general-tgrains [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
      (let [trate trate
            dur (/ dur-numerator trate)
            clk (impulse:ar trate)
            centerpos centerpos]
        (t-grains:ar 1
                     clk
                     buffer
                     1
                     centerpos
                     dur
                     0
                     amp
                     2)))
#+END_SRC

#+RESULTS:
: #<instrument: general-tgrains>

** add cc control to t-grains (trate with CC, pos with Mouse-x

#+BEGIN_SRC clojure :results silent
(general-tgrains 0 :trate 0.4 :amp 0.4)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(general-tgrains 1 :trate 0.1)
#+END_SRC

examples of centerpos arguments and trate arguments!

#+BEGIN_SRC clojure :results silent
[centerpos-mouse (mouse-x:kr 0 (buf-dur:kr b))]
[centerpos-line  (line 0 (buf-dur:kr 0) 500) ]
#+END_SRC

* make abstraction for playing with CC and granular synth

** preliminaries
- define atoms for two sets of channels and CC messages (see 'restart'
  section above)
** Confirm current channel number
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
            (if (= chan 1) (println chan) (println chan))
             )
::cc-state-if)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::cc-state-if)
#+END_SRC

** [#A] build large event handler (using "on-event")
*** hide largest on-event template (respond to channel 1 or other)
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
              (if (= chan 1)
                (cond (= cc-channel 1) (reset! cc1-1 val)
                      (= cc-channel 2) (reset! cc2-1 val)
                      (= cc-channel 3) (reset! cc3-1 val)
                      (= cc-channel 4) (reset! cc4-1 val)
                      (= cc-channel 5) (reset! cc5-1 val)
                      (= cc-channel 6) (reset! cc6-1 val)
                      (= cc-channel 7) (reset! cc7-1 val)
                      (= cc-channel 8) (reset! cc8-1 val)
                      )
                (cond (= cc-channel 1) (reset! cc1-2 val)
                      (= cc-channel 2) (reset! cc2-2 val)
                      (= cc-channel 3) (reset! cc3-2 val)
                      (= cc-channel 4) (reset! cc4-2 val)
                      (= cc-channel 5) (reset! cc5-2 val)
                      (= cc-channel 6) (reset! cc6-2 val)
                      (= cc-channel 7) (reset! cc7-2 val)
                      (= cc-channel 8) (reset! cc8-2 val)
                      )))
              ::large-cc-state)
          
          
#+END_SRC


#+BEGIN_SRC clojure :results silent
(remove-event-handler ::large-cc-state)
#+END_SRC

*** view current state
#+BEGIN_SRC clojure :results silent
(list 'Channel-one  @cc1-1 @cc2-1 @cc3-1 @cc4-1 @cc5-1 @cc6-1 @cc7-1 @cc8-1 'Channel-two @cc1-2 @cc2-2 @cc3-2 @cc4-2 @cc5-2 @cc6-2 @cc7-2 @cc8-2)
#+END_SRC


#+BEGIN_SRC clojure :results silent
(str "cc1-1: " @cc1-1 " cc2-1: " @cc2-1 " cc3-1: " @cc3-1 " cc4-1: " @cc4-1 " cc5-1: " @cc5-1 " cc6-1: " @cc6-1 " cc7-1: " @cc7-1 " cc8-1: " \n @cc8-1 " cc1-2: " @cc1-2 @cc2-2 @cc3-2 @cc4-2 @cc5-2 @cc6-2 @cc7-2 @cc8-2)
#+END_SRC

*** println CC-knob values and assign to SLOW-GRAIN-REVERB parameters

Requires slow-grain-reverb to be playing
[[id:F109AE32-4289-4A8B-8637-B68D7B4FA5B6][SLOW-GRAIN-REVERB: dedicated instrument abstraction for t-grains synths]]

#+BEGIN_SRC clojure
    (on-event [:midi :control-change]
              (fn [{cc-channel :note val :velocity chan :channel}]
                (if (= chan 1)
                  (cond (= cc-channel 1) (do (reset! cc1-1 (+ 1 (* val @cc5-1)))
                                             (ctl slow-grain-reverb :centerpos @cc1-1))
                        (= cc-channel 2) (do (reset! cc2-1 (+ 1 (* val @cc6-1)))
                                             (ctl slow-grain-reverb :centerpos @cc2-1))
                        (= cc-channel 3) (do (reset! cc3-1 (+ 1 (* val @cc7-1)))
                                             (ctl slow-grain-reverb :centerpos @cc3-1))
                        (= cc-channel 4) (do (reset! cc4-1 (+ 1 (* val @cc8-1)))
                                             (ctl slow-grain-reverb :centerpos @cc4-1))
                        (= cc-channel 5) (reset! cc5-1 val)
                        (= cc-channel 6) (reset! cc6-1 val)
                        (= cc-channel 7) (reset! cc7-1 val)
                        (= cc-channel 8) (reset! cc8-1 val)
                        ))
                (if (= chan 2)
                  (cond (= cc-channel 1) (do (reset! cc1-2 (scale-range val 1 127 0 1))
                                             (ctl slow-grain-reverb :grain-dur @cc1-2))
                        (= cc-channel 2) (do (reset! cc2-2 (scale-range val 1 127 1 2))
                                             (ctl slow-grain-reverb :centerpos @cc2-2))
                        (= cc-channel 3) (do (reset! cc3-2 (scale-range val 1 127 0 1))
                                             (ctl slow-grain-reverb :trigger-rate @cc3-2))
                        (= cc-channel 4) (do (reset! cc4-2 (+ 1 (* val @cc8-2)))
                                             (ctl slow-grain-reverb :centerpos @cc4-2)
                                             (println @cc4-2))
                        (= cc-channel 5)  (do (reset! cc5-2 val) 
                                             (println "@cc5-2:" @cc5-2))
                        (= cc-channel 6) (do (reset! cc6-2 val) 
                                             (println "@cc6-2:" @cc6-2))
                        (= cc-channel 7) (do (reset! cc7-2 val) 
                                             (println "@cc7-2:" @cc7-2))
                        (= cc-channel 8) (do (reset! cc8-2 val) 
                                             (println "@cc8-2:" @cc8-2))
                        )))              
  ::interdependent-knobs)
  ;; pseudo-code


#+END_SRC

#+RESULTS:
: :added-async-handler


#+BEGIN_SRC clojure :results silent
(remove-event-handler ::interdependent-knobs)
#+END_SRC

*** simple example of using RESET! and CTL on a noise synth
#+BEGIN_SRC clojure :results silent

    (on-event [:midi :control-change]
              (fn [{cc-channel :note vel :velocity}]
                (cond (= cc-channel 1) (do (reset! ffl (/ vel 127 )) 
                                           (ctl someother-fnoise :vol   (scale-range vel 1 127 0 1)))
                      (= cc-channel 2) (do (reset! ffh (* vel 10))
                                           (ctl someother-fnoise :ffreq (scale-range vel 1 127 @ffl @ffh)))
                      ))
              ::someother-pooper-do)

#+END_SRC

* overtone abstraction templates GOOD
** simple CC synth control function--takes any SYNTH as an argument
- sequence of 
#+BEGIN_SRC clojure :results silent
(defn make-synth-ctl [synth midi-channel synth-param]
  (fn [{cc-channel :note val :velocity chan :channel}]
    (if (= chan midi-channel)
      (cond (= cc-channel 1) (do (reset! cc1-1 (* (inc val) @cc5-1))
                                 (ctl synth (keyword synth-param) @cc1-1)
                                 (println "cc1-1:" @cc1-1))))))

(on-event [:midi :control-change]
          (make-synth-ctl slow-grain-reverb 1 'centerpos)
          :abstraction-cc-synth)

(slow-grain-reverb)
#+END_SRC

#+BEGIN_SRC clojure
(remove-event-handler ::abstraction-cc-synth)
#+END_SRC

#+RESULTS:
: :handler-removed

** simple TGrains variations function--use general-tgrains above
    args to general-tgrains [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
** customize CC synth control for exacting centerpos work
#+BEGIN_SRC clojure :results silent
;; copied from above
  (defn make-synth-ctl [synth midi-channel synth-param]
    (fn [{cc-channel :note val :velocity chan :channel}]
      (if (= chan midi-channel)
        (cond (= cc-channel 1) (do (reset! cc1-1 val)
                                   (ctl synth (keyword synth-param) @cc1-1)
                                   (println "cc1-1:" @cc1-1))
              ))))

  (defn make-synth-ctl-pads [synth midi-channel synth-param]
    (fn [{cc-channel :note val :velocity chan :channel}]
      (if (= chan midi-channel)
        (cond (= cc-channel 40) (do (swap! pad5-1 inc)
                                   (ctl synth (keyword synth-param) @pad5-1)
                                   (println "pad5-1:" @pad5-1))
              ))))



  (on-event [:midi :control-change]
            (make-synth-ctl general-tgrains 1 'centerpos)
            :abstraction-cc-synth)

  (on-event [:midi :note-on]
            (make-synth-ctl-pads general-tgrains 1 'centerpos)
            :abstraction-cc-synth-pad)


#+END_SRC

#+BEGIN_SRC clojure :results silent
  (general-tgrains 0)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl general-tgrains :centerpos 100)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl general-tgrains :centerpos 1)
#+END_SRC

** [#A] full knob and pad abstraction
:PROPERTIES:
:ID:       C945047A-E0FD-439C-9354-6F8CA4989DAE
:END:
#+BEGIN_SRC clojure
  (defn reset-knob [synth buffer-num synth-param knob-number place midi-channel & {:keys [scale]
                                                                        :or {scale 1}}]
      (fn [{knob :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= knob knob-number)
                (do (reset! place (* val scale))
                    (ctl synth (keyword buffer) buffer-num (keyword synth-param) (deref place))
                    (println (str synth-param knob-number " : ") (deref place)))))))

#+END_SRC

#+RESULTS:
: #'user/reset-knob

#+BEGIN_SRC clojure

  (defn swap-pad [synth buffer-num synth-param pad-number place swap-fn midi-channel]
      (fn [{pad :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= pad pad-number)
                (do (swap! place swap-fn)
                    (ctl synth (keyword buffer) buffer-num (keyword synth-param) (deref place))
                    (println (str synth-param pad-number " : ") (deref place)))))))
    
#+END_SRC

#+RESULTS:
: #'user/swap-pad

** play goldberg with general-tgrains granular synth
:PROPERTIES:
:ID:       AD3B833A-363B-410D-A18E-348F8D7D4182
:END:
#+BEGIN_SRC clojure :results silent
(general-tgrains 0)
#+END_SRC

** play yancey
:PROPERTIES:
:ID:       44B87F5F-FCA4-4451-A91C-A2DCD2F9F714
:END:
#+BEGIN_SRC clojure :results silent
(general-tgrains 1)
#+END_SRC

** [#C] use "reset-knob" and "swap-pad" to control "general-tgrains"

this says: 
control the "centerpos" argument of the "general-tgrains" synth using
"knob 1" (which uses the "cc1-1" var to hold its current state) when
it is being controlled on channel 1

But needs an event handler to actually respond to cc-messages! see
"on-events" below

#+BEGIN_SRC clojure :results silent
;; note that we are passing single numbers to the synth-parameters arguments
;; ideally, we will get these values automatically from "state"
(reset-knob general-tgrains :centerpos 1 cc1-1 1)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(reset-knob general-tgrains :centerpos 1 cc1-1 1)
(swap-pad general-tgrains :centerpos 36 pad1-1 inc 1)
(swap-pad general-tgrains :centerpos 37 pad2-1 dec 1)
#+END_SRC

** [#B] create event-handlers for general-tgrains
:PROPERTIES:
:ID:       F51E8E40-9886-45B3-A06F-7C64DAD2FE7A
:END:
*** define control-change knobs 

#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (reset-knob general-tgrains :buffer 0 :amp 2 cc2-1 1 :scale 0.01)
            ::amp-knob2)

  (on-event [:midi :control-change]
            (reset-knob general-tgrains :buffer 0 :centerpos 1 cc1-1 1 :scale 0.5)
            ::centerpos-knob1)
#+END_SRC

*** define pads
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :centerpos 38 pad3-1 inc 1)
            ::centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :centerpos 39 pad3-1 dec 1)
            ::centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :dur-numerator 36 pad1-1 inc 1)
            ::durnumerator-pad1)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :dur-numerator 37 pad1-1 dec 1)
            ::durnumerator-pad2)

(on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :trate 42 pad7-1 (fn [x] (+ 0.1 x)) 1)
            ::trate-pad7-inc)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 0 :trate 43 pad7-1 (fn [x] (- x 0.1)) 1)
            ::trate-pad8-dec)
#+END_SRC

*** remove event handlers for goldberg

#+BEGIN_SRC clojure
(remove-event-handler ::amp-knob2)
(remove-event-handler ::centerpos-knob1)
(remove-event-handler ::centerpos-pad3-inc)
(remove-event-handler ::centerpos-pad4-dec)
(remove-event-handler ::durnumerator-pad1)
(remove-event-handler ::durnumerator-pad2)
(remove-event-handler ::trate-pad7-inc)
(remove-event-handler ::trate-pad8-dec)
#+END_SRC

#+RESULTS:
: :handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed

* systematically create event-handlers for general-tgrains on channels 1 and 2
:PROPERTIES:
:ID:       F51E8E40-9886-45B3-A06F-7C64DAD2FE7A
:END:

** uses abstractions defined above--see 'steps'
[[id:FC7DE6AF-7BCA-4E0F-B10C-19C7CD6E1B42][steps]] in more-advanced-overtone-exploring.org lays out a process of
getting going with goldberg aria
** define control-change knobs for goldberg and Channel 1
:PROPERTIES:
:ID:       23951DB5-0EEC-4CB4-B949-C728F4CF2A2D
:END:

#+BEGIN_SRC clojure
  (on-event [:midi :control-change]
            (reset-knob general-tgrains :buffer 1 :amp 2 :place cc2-2 :midi-channel 2 :scale 0.01)
            ::yancey-amp-knob2)

  (on-event [:midi :control-change]
            (reset-knob general-tgrains :buffer 1 :centerpos 1 cc1-2 :midi-channel 2 :scale 0.5)
            ::yancey-centerpos-knob1)
#+END_SRC

#+RESULTS:
: :added-async-handler

** define pads
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :centerpos 38 pad3-1 inc 1)
            ::yancey-centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :centerpos 39 pad3-1 dec 1)
            ::yancey-centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :dur-numerator 36 pad1-1 inc 1)
            ::yancey-durnumerator-pad1)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :dur-numerator 37 pad1-1 dec 1)
            ::yancey-durnumerator-pad2)

(on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :trate 42 pad7-1 (fn [x] (+ 0.1 x)) 1)
            ::yancey-trate-pad7-inc)

  (on-event [:midi :note-on]
            (swap-pad general-tgrains :buffer 1 :trate 43 pad7-1 (fn [x] (- x 0.1)) 1)
            ::yancey-trate-pad8-dec)
#+END_SRC

** remove event handlers for goldberg
#+BEGIN_SRC clojure
(remove-event-handler ::yancey-amp-knob2)
(remove-event-handler ::yancey-centerpos-knob1)
(remove-event-handler ::yancey-centerpos-pad3-inc)
(remove-event-handler ::yancey-centerpos-pad4-dec)
(remove-event-handler ::yancey-durnumerator-pad1)
(remove-event-handler ::yancey-durnumerator-pad2)
(remove-event-handler ::yancey-trate-pad7-inc)
(remove-event-handler ::yancey-trate-pad8-dec)
#+END_SRC
* save given state of parameters for replaying good grain-moments
* granular synth examples in sclang
** examples to overtone
*** supercollider TGrain examples
#+END_SRC

#+BEGIN_SRC sclang 
  b = Buffer.read(s, Platform.resourceDir +/+ "sounds/full-time-mono.wav");
#+END_SRC

#+BEGIN_SRC sclang 
  //   ~variation1 = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apollo-variation1-mono.wav");
    b = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apollo-variation1-mono.wav");
#+END_SRC
#+COMMENT change /clk/=Dust, dur= 4 / trate
*** uses dust!
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = MouseY.kr(8,120,1);
          dur = 4 / trate;
          clk = Dust.kr(trate);
          pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk);
          pan = WhiteNoise.kr(0.6);
          TGrains.ar(2, clk, b, 1, pos, dur, pan, 1);
  }.play;
  )
#+END_SRC
*** some flanging
#+COMMENT change /trate/= depends on MouseY and some Triangle+Lin regularity
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = LinExp.kr(LFTri.kr(MouseY.kr(0.1,2,1)),-1,1,8,120);
          dur = 12 / trate;
          clk = Impulse.ar(trate);
          pos = MouseX.kr(0,BufDur.kr(b));
          pan = WhiteNoise.kr(0.6);
          TGrains.ar(2, clk, b, 1, pos, dur, pan, 1);
  }.play;
  )
#+END_SRC
*** TRand on centerpos makes more natural grains
#+COMMENT change /dur/= small sensitive to MouseY
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = 12;
          dur = MouseY.kr(0.2,24,1) / trate;
          clk = Impulse.kr(trate);
          pos = MouseX.kr(0,BufDur.kr(b)) + TRand.kr(0, 0.01, clk);
          pan = WhiteNoise.kr(0.6);
          TGrains.ar(2, clk, b, 1, pos, dur, pan, 1);
  }.play;
  )
#+END_SRC
*** non Mouse controlled
#+COMMENT change /pos/= BrownNoise sensitive, jumping around (with Integrator.kr)
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = 100;
          dur = 8 / trate;
          clk = Impulse.kr(trate);
          pos = Integrator.kr(BrownNoise.kr(0.001));
          pan = WhiteNoise.kr(0.6);
          TGrains.ar(2, clk, b, 1, pos, dur, pan, 0.5);
  }.play;
  )
#+END_SRC
*** [#A] use TGrain playback rate with randomness to skew pitch etc (long grains overlap)
#+COMMENT change /rate/= dependent on exponential whitenoise
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur, clk, pos, pan;
          trate = MouseY.kr(1,400,1);
          dur = 8 / trate;
          clk = Impulse.kr(trate);
          pos = MouseX.kr(0,BufDur.kr(b));
          pan = WhiteNoise.kr(0.8);
          TGrains.ar(2, clk, b, 2 ** WhiteNoise.kr(2), pos, dur, pan, 1);
  }.play;
  )
#+END_SRC
*** change pitch with Playback--shorter single grains
#+COMMENT change /pos/ WhiteNoise, /center pos/=Xmouse sensitive,
# /pan/=White Noise
#+BEGIN_SRC sclang :tangle "~/Documents/working-directory/apollosc.sc"
  (
  {
          var trate, dur;
          trate = MouseY.kr(2,120,1);
          dur = 1.2 / trate;
          TGrains.ar(2, Impulse.ar(trate), b, (1.2 ** WhiteNoise.kr(3).round(1)), MouseX.kr(0,BufDur.kr(b)), dur, WhiteNoise.kr(0.6), 1);
  }.play;
  )
#+END_SRC
** manipulating best of sc Gran examples
#+BEGIN_SRC sclang
(
{
        var trate, dur, clk, pos, pan;
        trate = MouseY.kr(1,400,1);
        dur = 8 / trate;
        clk = Impulse.kr(trate);
        pos = MouseX.kr(0,BufDur.kr(b));
        pan = WhiteNoise.kr(0.8);
        TGrains.ar(2, clk, b, 1, pos, dur, pan, 1);
}.play;
)

#+END_SRC

* translate goldberg and yancey to overtone
** check loaded buffers for incarnation

[[id:19C65970-C333-4D09-AD7B-31C158D9C120][make sure buffer was loaded]] as above

#+RESULTS:

Basic playback of a loaded buffer

#+BEGIN_SRC clojure :results silent
(definst playback-buf [bufname 0] (play-buf 1 bufname))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(playback-buf yancey)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(playback-buf goldberg-slow)
#+END_SRC

#+BEGIN_SRC clojure
(buffer-info goldberg-slow)
#+END_SRC

#+RESULTS:
: #<buffer-info: 184.540590s mono 0>

#+BEGIN_SRC clojure
(buffer-info yancey)
#+END_SRC

#+RESULTS:
: #<buffer-info: 272.938163s mono 1>

** supercollider yancey and goldberg synth version
#+BEGIN_SRC sclang
  (
    // add buffer argument
    SynthDef(\yancey_synth,
        {
            arg trate = 2,
            dur = 2,
            centerpos = 1000,
            // buffer = ~yancey.bufnum,
            buffer = 7,
            amp = 0.5;
            Out.ar(0, TGrains.ar(2, Impulse.ar(trate), buffer, 1, centerpos, dur, 0, amp, 2))
        }).add;
    );

  (
    // add buffer argument
    SynthDef(\goldberg_synth,
        {
            arg trate = 2,
            dur = 2,
            centerpos = 1000,
            // buffer = ~goldberg.bufnum,
            buffer = 3, 
            amp = 0.5;
            Out.ar(0, TGrains.ar(2, Impulse.ar(trate), buffer, 1, centerpos, dur, 0, amp, 2))
        }).add;
    );

// broadcasting on channel 4 
    MIDIdef.cc(\yancey_TRate, {arg args; h.set(\trate, args / 127)}, 1, 4);
    MIDIdef.cc(\yancey_Dur, {arg args; h.set(\dur, args * 0.5)}, 2, 4);

    MIDIdef.cc(\yancey_Center, {arg args; h.set(\centerpos, args * 1000)}, 3, 4);
    MIDIdef.cc(\yancey_Amp, {arg args; h.set(\amp, args / 127)}, 4, 4);

    MIDIdef.cc(\goldberg_TRate, {arg args; i.set(\trate, args / 127)}, 5, 4);
    MIDIdef.cc(\goldberg_Dur, {arg args; i.set(\dur, args * 0.5)}, 6, 4);

    MIDIdef.cc(\goldberg_Center, {arg args; i.set(\centerpos, args * 1000)}, 7, 4);
    MIDIdef.cc(\goldberg_Amp, {arg args; i.set(\amp, args / 127)}, 8, 4);

    h = Synth(\yancey_synth);

    i = Synth(\goldberg_synth);
#+END_SRC

* relevant apollo and incarnations soundfiles
** directories
[[file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/][file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/]]
[[file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/][file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/]]
[[file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/apollo-tracks/][file:/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/apollo-tracks/]]
** supercollider Buffer.read en masse
#+BEGIN_SRC sclang
  ~variation1 = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apollo-variation1-mono.wav");
  ~variation2 = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apollo-variation2-mono.wav");
  ~yancey = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/how-long-slowest-mono.wav");
  ~goldberg = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/goldberg-slow-mono.wav");
  ~apotheose = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/apotheose-mono.wav");
  ~calliope = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/calliope-mono.wav");
  ~coda = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/coda-mono.wav");
  ~yancey = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/how-long-slowest-mono.wav");
  ~naissance = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/naissance-mono.wav");
  ~action = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/pas-d'action-mono.wav");
  ~deux = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/pas-de-deux-mono.wav");
  ~poly = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/polymnie-mono.wav");
  ~terpsichore = Buffer.read(s, Platform.resourceDir +/+ "sounds/all-mono/terpsichore-mono.wav");
#+END_SRC

* consolidated steps restart (in progress)
** a start (too large)

#+BEGIN_SRC clojure
  (midi-connected-devices)


  (def goldberg-slow (load-sample "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))

  (def yancey (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/how-long-slowest-mono.wav"))


  (definst general-tgrains [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator trate)
          clk (impulse:ar trate)
          centerpos centerpos]
      (t-grains:ar 1
                   clk
                   buffer
                   1
                   centerpos
                   dur
                   0
                   amp
                   2)))


  (def cc1-1 (atom 0))
  (def cc2-1 (atom 0))
  (def cc3-1 (atom 0))
  (def cc4-1 (atom 0))
  (def cc5-1 (atom 0))
  (def cc6-1 (atom 0))
  (def cc7-1 (atom 0))
  (def cc8-1 (atom 0))
  (def cc1-2 (atom 0))
  (def cc2-2 (atom 0))
  (def cc3-2 (atom 0))
  (def cc4-2 (atom 0))
  (def cc5-2 (atom 0))
  (def cc6-2 (atom 0))
  (def cc7-2 (atom 0))
  (def cc8-2 (atom 0))

  (def pad1-1 (atom 0))
  (def pad2-1 (atom 0))
  (def pad3-1 (atom 0))
  (def pad4-1 (atom 0))
  (def pad5-1 (atom 0))
  (def pad6-1 (atom 0))
  (def pad7-1 (atom 0))
  (def pad8-1 (atom 0))
  (def pad1-2 (atom 0))
  (def pad2-2 (atom 0))
  (def pad3-2 (atom 0))
  (def pad4-2 (atom 0))
  (def pad5-2 (atom 0))
  (def pad6-2 (atom 0))
  (def pad7-2 (atom 0))
  (def pad8-2 (atom 0))


    (defn reset-knob [synth synth-param knob-number place midi-channel & {:keys [scale]
                                                                          :or {scale 1}}]
        (fn [{knob :note val :velocity chan :channel}]
          (if (= chan midi-channel)
            (cond (= knob knob-number)
                  (do (reset! place (* val scale))
                      (ctl synth (keyword synth-param) (deref place))
                      (println (str synth-param knob-number " : ") (deref place)))))))




    (defn swap-pad [synth synth-param pad-number place swap-fn midi-channel]
        (fn [{pad :note val :velocity chan :channel}]
          (if (= chan midi-channel)
            (cond (= pad pad-number)
                  (do (swap! place swap-fn)
                      (ctl synth (keyword synth-param) (deref place))
                      (println (str synth-param pad-number " : ") (deref place)))))))
    


    (on-event [:midi :control-change]
              (reset-knob general-tgrains :buffer 0 :amp 2 cc2-1 1 :scale 0.01)
              ::amp-knob2)

    (on-event [:midi :control-change]
              (reset-knob general-tgrains :buffer 0 :centerpos 1 cc1-1 1 :scale 0.5)
              ::centerpos-knob1)


    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :centerpos 38 pad3-1 inc 1)
              ::centerpos-pad3-inc)

    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :centerpos 39 pad3-1 dec 1)
              ::centerpos-pad4-dec)

    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :dur-numerator 36 pad1-1 inc 1)
              ::durnumerator-pad1)

    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :dur-numerator 37 pad1-1 dec 1)
              ::durnumerator-pad2)

  (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :trate 42 pad7-1 (fn [x] (+ 0.1 x)) 1)
              ::trate-pad7-inc)

    (on-event [:midi :note-on]
              (swap-pad general-tgrains :buffer 0 :trate 43 pad7-1 (fn [x] (- x 0.1)) 1)
              ::trate-pad8-dec)


    (on-event [:midi :control-change]
              (reset-knob general-tgrains :buffer 1 :amp 2 :place cc2-2 :midi-channel 2 :scale 0.01)
              ::yancey-amp-knob2)

    (on-event [:midi :control-change]
              (reset-knob general-tgrains :buffer 1 :centerpos 1 cc1-2 2 :scale 0.5)
              ::yancey-centerpos-knob1)
#+END_SRC

#+RESULTS:
: ({:description "Axiom A.I.R. Mini32 MIDI", :vendor "M-Audio", :sinks 0, :sources 2147483647, :name "MIDI", :overtone.studio.midi/full-device-key [:midi-device "M-Audio" "MIDI" "Axiom A.I.R. Mini32 MIDI" 0], :info #object[com.sun.media.sound.MidiInDeviceProvider$MidiInDeviceInfo 0x5386ff43 "MIDI"], :overtone.studio.midi/dev-num 0, :device #object[com.sun.media.sound.MidiInDevice 0x7bf18b15 "com.sun.media.sound.MidiInDevice@7bf18b15"], :version "Unknown version"} {:description "Axiom A.I.R. Mini32 HyperControl", :vendor "M-Audio", :sinks 0, :sources 2147483647, :name "HyperControl", :overtone.studio.midi/full-device-key [:midi-device "M-Audio" "HyperControl" "Axiom A.I.R. Mini32 HyperControl" 0], :info #object[com.sun.media.sound.MidiInDeviceProvider$MidiInDeviceInfo 0x77743fc8 "HyperControl"], :overtone.studio.midi/dev-num 0, :device #object[com.sun.media.sound.MidiInDevice 0x68bfe7ec "com.sun.media.sound.MidiInDevice@68bfe7ec"], :version "Unknown version"})#'user/goldberg-slow#'user/yancey#<instrument: general-tgrains>#'user/cc1-1#'user/cc2-1#'user/cc3-1#'user/cc4-1#'user/cc5-1#'user/cc6-1#'user/cc7-1#'user/cc8-1#'user/cc1-2#'user/cc2-2#'user/cc3-2#'user/cc4-2#'user/cc5-2#'user/cc6-2#'user/cc7-2#'user/cc8-2#'user/pad1-1#'user/pad2-1#'user/pad3-1#'user/pad4-1#'user/pad5-1#'user/pad6-1#'user/pad7-1#'user/pad8-1#'user/pad1-2#'user/pad2-2#'user/pad3-2#'user/pad4-2#'user/pad5-2#'user/pad6-2#'user/pad7-2#'user/pad8-2#'user/reset-knob#'user/swap-pad:added-async-handler:added-async-handler:added-async-handler:added-async-handler
** [#C] use two different channels for modifying the two different synths
#+BEGIN_SRC clojure
  (on-event [:midi :control-change]
            (old-reset-knob gold :amp 2 cc2-1 1 :scale 0.01)
            ::old-amp-knob2-gold)

  (on-event [:midi :control-change]
            (old-reset-knob gold :centerpos 1 cc1-1 1 :scale 0.5)
            ::old-centerpos-knob1-gold)

  (on-event [:midi :control-change]
            (old-reset-knob yanc :amp 2 cc2-2 2 :scale 0.01)
            ::old-amp-knob2-yanc)

  (on-event [:midi :control-change]
            (old-reset-knob yanc :centerpos 1 cc1-2 2 :scale 0.5)
            ::old-centerpos-knob1-yanc)
#+END_SRC

Use one-channel but inc/dec more than two parameters per synth
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :note-on]
            (old-swap-pad yanc :centerpos 38 pad3-1 inc 1)
            ::yancey-centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :centerpos 39 pad3-1 dec 1)
            ::yancey-centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :dur-numerator 36 pad1-1 inc 1)
            ::yancey-durnumerator-pad1)

  (on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :dur-numerator 37 pad1-1 dec 1)
            ::yancey-durnumerator-pad2)

(on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :trate 42 pad7-1 (fn [x] (+ 0.1 x)) 1)
            ::yancey-trate-pad7-inc)

  (on-event [:midi :note-on]
            (old-swap-pad general-tgrains :buffer 1 :trate 43 pad7-1 (fn [x] (- x 0.1)) 1)
            ::yancey-trate-pad8-dec)
#+END_SRC
* unified, systematized goldberg and yancey interface (as model)
** define general-tgrains-synth and name two such synths
#+BEGIN_SRC clojure
    (defsynth general-tgrains-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
      (out 0 (let [trate trate
            dur (/ dur-numerator trate)
            clk (impulse:ar trate)
            centerpos centerpos]
        (t-grains:ar 1
                     clk
                     buffer
                     1
                     centerpos
                     dur
                     0
                     amp
                     2))))
#+END_SRC

#+RESULTS:
: #<synth: general-tgrains-synth>
** define two vars for playing two buffers with general-tgrains-synth
#+BEGIN_SRC clojure
(def gold (general-tgrains-synth 0))
(def yanc (general-tgrains-synth 1))
#+END_SRC

#+RESULTS:
: #'user/gold#'user/yanc


#+BEGIN_SRC clojure
(kill gold)
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(ctl yanc :centerpos 40)
#+END_SRC

#+RESULTS:
: #<synth-node[live]: user/general-tgrains-synth 76>
** redo with general-tgrains-synth over general-tgrains as an inst

#+BEGIN_SRC clojure
  (defn old-reset-knob [synth synth-param knob-number place midi-channel & {:keys [scale]
                                                                        :or {scale 1}}]
      (fn [{knob :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= knob knob-number)
                (do (reset! place (* val scale))
                    (ctl synth (keyword synth-param) (deref place))
                    (println (str synth-param knob-number " : ") (deref place)))))))

  (defn old-swap-pad [synth synth-param pad-number place swap-fn midi-channel]
      (fn [{pad :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= pad pad-number)
                (do (swap! place swap-fn)
                    (ctl synth (keyword synth-param) (deref place))
                    (println (str synth-param pad-number " : ") (deref place)))))))
#+END_SRC

#+RESULTS:
: #'user/old-reset-knob#'user/old-swap-pad

Set four knobs
#+BEGIN_SRC clojure
  (on-event [:midi :control-change]
            (old-reset-knob gold :amp 2 cc2-1 1 :scale 0.01)
            ::old-amp-knob2-gold)

  (on-event [:midi :control-change]
            (old-reset-knob gold :centerpos 1 cc1-1 1 :scale 0.5)
            ::old-centerpos-knob1-gold)

  (on-event [:midi :control-change]
            (old-reset-knob yanc :amp 6 cc5-1 1 :scale 0.01)
            ::old-amp-knob2-yanc)

  (on-event [:midi :control-change]
            (old-reset-knob yanc :centerpos 5 cc6-1 1 :scale 0.5)
            ::old-centerpos-knob1-yanc)
#+END_SRC

#+RESULTS:
: :added-async-handler:added-async-handler:added-async-handler:added-async-handler

set eight pads

#+BEGIN_SRC clojure
  (on-event [:midi :note-on]
            (old-swap-pad yanc :centerpos 38 pad3-1 inc 1)
            ::yancey-centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (old-swap-pad yanc  :centerpos 39 pad3-1 dec 1)
            ::yancey-centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (old-swap-pad yanc  :dur-numerator 36 pad1-1 inc 1)
            ::yancey-durnumerator-pad1-inc)

  (on-event [:midi :note-on]
            (old-swap-pad yanc  :dur-numerator 37 pad1-1 dec 1)
            ::yancey-durnumerator-pad2-inc)

  (on-event [:midi :note-on]
            (old-swap-pad gold :centerpos 42 pad7-1 inc 1)
            ::gold-centerpos-pad7-inc)

  (on-event [:midi :note-on]
            (old-swap-pad gold :centerpos 43 pad7-1 dec 1)
            ::gold-centerpos-pad8-dec)

  (on-event [:midi :note-on]
            (old-swap-pad gold  :dur-numerator 40 pad5-1 inc 1)
            ::gold-durnumerator-pad5-inc)

  (on-event [:midi :note-on]
            (old-swap-pad gold  :dur-numerator 41 pad5-1 dec 1)
            ::gold-durnumerator-pad6-dec)
#+END_SRC

#+RESULTS:
: :added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler

