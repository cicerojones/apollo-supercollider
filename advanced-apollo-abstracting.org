* Apollo-overtone restart essentials
:PROPERTIES:
:ID:       DFFB3F5A-370C-4D2A-BA61-685E4B73CCAC
:END:
** stop all sound

#+BEGIN_SRC clojure
(stop)
#+END_SRC

#+RESULTS:
: nil
** record all sound
#+BEGIN_SRC clojure :results silent
(recording-start "~/Desktop/goldberg-2016-1.wav")
#+END_SRC

#+BEGIN_SRC clojure :results silent
(recording-start "~/Desktop/goldberg-2016-2.wav")
#+END_SRC


#+BEGIN_SRC clojure :results silent
(recording-start "~/Desktop/yancey-2016-1.wav")
#+END_SRC

#+BEGIN_SRC clojure :results silent
(recording-stop)
#+END_SRC
** use overtone.core, connect to external, load buffers, define macros

#+BEGIN_SRC clojure :results silent
(use 'overtone.core)
;; will appear to time out but all is well--check below
#+END_SRC

#+BEGIN_SRC clojure :results silent
(connect-external-server)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(demo (sin-osc))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(use 'overtone.live)
#+END_SRC

** make sure buffer was loaded
:PROPERTIES:
:ID:       19C65970-C333-4D09-AD7B-31C158D9C120
:END:


#+BEGIN_SRC clojure
(def goldberg-slow (load-sample "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))

(def yancey (load-sample "/Applications/SuperCollider/SuperCollider.app/Contents/Resources/sounds/all-mono/how-long-slowest-mono.wav"))
#+END_SRC

#+RESULTS:
: #'user/goldberg-slow#'user/yancey




#+BEGIN_SRC clojure :results silent
(definst play [b 0] (play-buf 1 b))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(play)
(play 1)
#+END_SRC

** keyboard macro to stop sound
#+BEGIN_SRC elisp
(fset 'kill-overtone-from-buffer
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([67108896 67108896 134217788 3 22 14 3 3 21 67108896 12] 0 "%d")) arg)))
   
(global-set-key [f6] 'kill-overtone-from-buffer)

#+END_SRC

#+RESULTS:
: kill-overtone-from-buffer

#+BEGIN_SRC elisp
;; Keyboard Macro Editor.  Press C-c C-c to finish; press C-x k RET to cancel.
;; Original keys: 2*C-SPC M-< C-c C-v C-n C-c C-c C-u C-SPC C-l

Command: last-kbd-macro
Key: none

Macro:

2*C-SPC			;; set-mark-command
M-<			;; beginning-of-buffer
C-c C-v C-n		;; org-babel-next-src-block
C-c C-c C-u
C-SPC			;; set-mark-command
C-l			;; recenter-top-bottom

#+END_SRC

** confirm MIDI controller connected

#+BEGIN_SRC clojure :results silent
(event-debug-on)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(event-debug-off)
#+END_SRC

** Confirm current channel number
#+BEGIN_SRC clojure :results silent
  (on-event [:midi :control-change]
            (fn [{cc-channel :note val :velocity chan :channel}]
            (if (= chan 1) (println chan) (println chan))
             )
::cc-state-if)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::cc-state-if)
#+END_SRC

** define 32 atoms for two sets of channels and CC messages
:PROPERTIES:
:ID:       B3DB9C3B-4F2B-40D4-B16C-DF3047C968D9
:END:
#+BEGIN_SRC clojure :results silent
;; channel one control change knobs
  (def cc1-1 (atom 0))
  (def cc2-1 (atom 0))
  (def cc3-1 (atom 0))
  (def cc4-1 (atom 0))
  (def cc5-1 (atom 0))
  (def cc6-1 (atom 0))
  (def cc7-1 (atom 0))
  (def cc8-1 (atom 0))

;; channel two control change knobs
  (def cc1-2 (atom 0))
  (def cc2-2 (atom 0))
  (def cc3-2 (atom 0))
  (def cc4-2 (atom 0))
  (def cc5-2 (atom 0))
  (def cc6-2 (atom 0))
  (def cc7-2 (atom 0))
  (def cc8-2 (atom 0))

;; channel one pads
  (def pad1-1 (atom 0))
  (def pad2-1 (atom 0))
  (def pad3-1 (atom 0))
  (def pad4-1 (atom 0))
  (def pad5-1 (atom 0))
  (def pad6-1 (atom 0))
  (def pad7-1 (atom 0))
  (def pad8-1 (atom 0))

;; channel two pads
  (def pad1-2 (atom 0))
  (def pad2-2 (atom 0))
  (def pad3-2 (atom 0))
  (def pad4-2 (atom 0))
  (def pad5-2 (atom 0))
  (def pad6-2 (atom 0))
  (def pad7-2 (atom 0))
  (def pad8-2 (atom 0))
#+END_SRC

** monitor current state of refs
:PROPERTIES:
:ID:       119605DE-9AD4-4818-B921-3E6B76396D6C
:END:
#+BEGIN_SRC clojure
  (list 'Channel-one
        'KNOBS @cc1-1 @cc2-1 @cc3-1 @cc4-1 @cc5-1 @cc6-1 @cc7-1 @cc8-1
        'PADS @pad1-1 @pad2-1 @pad3-1 @pad4-1 @pad5-1 @pad6-1 @pad7-1 @pad8-1
        'Channel-two
        'KNOBS
        @cc1-2 @cc2-2 @cc3-2 @cc4-2 @cc5-2 @cc6-2 @cc7-2 @cc8-2
        'PADS @pad1-2 @pad2-2 @pad3-2 @pad4-2 @pad5-2 @pad6-2 @pad7-2 @pad8-2)
#+END_SRC

#+RESULTS:
| Channel-one | KNOBS | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | PADS | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | Channel-two | KNOBS | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | PADS | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |

* unified, systematized goldberg and yancey interface (as model)
** define general-tgrains-synth and name two such synths
MONO! (use =pan2=)

#+BEGIN_SRC clojure
    (defsynth general-tgrains-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
      (out 0 (let [trate trate
            dur (/ dur-numerator trate)
            clk (impulse:ar trate)
            centerpos centerpos]
        (t-grains:ar 1
                     clk
                     buffer
                     1
                     centerpos
                     dur
                     0
                     amp
                     2))))
#+END_SRC

#+RESULTS:
: #<synth: general-tgrains-synth>

#+BEGIN_SRC clojure
(general-tgrains-synth 0)
#+END_SRC

#+RESULTS:
: #<synth-node[loading]: user/general-tgrains-synth 425>



#+RESULTS:
: #<synth: general-tgrains-synth>

** define two vars for playing two buffers with general-tgrains-synth
#+BEGIN_SRC clojure
(def gold (general-tgrains-synth 0))
(def yanc (general-tgrains-synth 1))
#+END_SRC

#+RESULTS:
: #'user/gold#'user/yanc


#+BEGIN_SRC clojure
(kill gold)
#+END_SRC

#+RESULTS:
: nil

#+BEGIN_SRC clojure
(ctl yanc :centerpos 40)
#+END_SRC

#+RESULTS:
: #<synth-node[live]: user/general-tgrains-synth 427>
** define knob and pad changes with more sophisticated passing

#+BEGIN_SRC clojure
  (defn old-reset-knob [synth synth-param knob-number place midi-channel & {:keys [scale]
                                                                        :or {scale 1}}]
      (fn [{knob :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= knob knob-number)
                (do (reset! place (* val scale))
                    (ctl synth (keyword synth-param) (deref place))
                    (println (str synth-param knob-number " : ") (deref place)))))))

  (defn old-swap-pad [synth synth-param pad-number place swap-fn midi-channel]
      (fn [{pad :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= pad pad-number)
                (do (swap! place swap-fn)
                    (ctl synth (keyword synth-param) (deref place))
                    (println (str synth-param pad-number " : ") (deref place)))))))
#+END_SRC

#+RESULTS:
: #'user/old-reset-knob#'user/old-swap-pad
** Set four knobs for amp and centerpos across goldberg and yancey
#+BEGIN_SRC clojure
  (on-event [:midi :control-change]
            (old-reset-knob gold :amp 2 cc2-1 1 :scale 0.01)
            ::old-amp-knob2-gold)

  (on-event [:midi :control-change]
            (old-reset-knob gold :centerpos 1 cc1-1 1 :scale 0.5)
            ::old-centerpos-knob1-gold)

  (on-event [:midi :control-change]
            (old-reset-knob yanc :amp 6 cc5-1 1 :scale 0.01)
            ::old-amp-knob2-yanc)

  (on-event [:midi :control-change]
            (old-reset-knob yanc :centerpos 5 cc6-1 1 :scale 0.5)
            ::old-centerpos-knob1-yanc)
#+END_SRC

#+RESULTS:
: :added-async-handler:added-async-handler:added-async-handler:added-async-handler
** set eight pads for "inc/dec" of centerpos and dur-numerator

#+BEGIN_SRC clojure
  (on-event [:midi :note-on]
            (old-swap-pad yanc :centerpos 38 pad3-1 inc 1)
            ::yancey-centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (old-swap-pad yanc  :centerpos 39 pad3-1 dec 1)
            ::yancey-centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (old-swap-pad yanc  :dur-numerator 36 pad1-1 inc 1)
            ::yancey-durnumerator-pad1-inc)

  (on-event [:midi :note-on]
            (old-swap-pad yanc  :dur-numerator 37 pad1-1 dec 1)
            ::yancey-durnumerator-pad2-dec)

  (on-event [:midi :note-on]
            (old-swap-pad gold :centerpos 42 pad7-1 inc 1)
            ::gold-centerpos-pad7-inc)

  (on-event [:midi :note-on]
            (old-swap-pad gold :centerpos 43 pad7-1 dec 1)
            ::gold-centerpos-pad8-dec)

  (on-event [:midi :note-on]
            (old-swap-pad gold  :dur-numerator 40 pad5-1 inc 1)
            ::gold-durnumerator-pad5-inc)

  (on-event [:midi :note-on]
            (old-swap-pad gold  :dur-numerator 41 pad5-1 dec 1)
            ::gold-durnumerator-pad6-dec)
#+END_SRC

#+RESULTS:
: :added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler
* other granular synth definitions
** use lines and scaling and more MIDI buttons
:PROPERTIES:
:ID:       326223F4-AA19-4058-A07C-3E5F5DB9AFF5
:END:
#+BEGIN_SRC clojure
(def gold (general-tgrains-synth :buffer 0 :centerpos (line:kr 0.0 100 30)))
#+END_SRC

#+RESULTS:
: #'user/gold

#+BEGIN_SRC clojure
  (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0 mult 2]
    (out 0 (pan2 
            (let [track-len (buf-dur:kr buffer)
                  trate trate
                  dur (/ dur-numerator trate)
                  clk (impulse:ar trate)
                  centerpos (line:kr centerpos track-len (* mult track-len))  ]
              (t-grains:ar 1
                           clk
                           buffer
                           1
                           centerpos
                           dur
                           0
                           amp
                           2)))))
#+END_SRC

#+RESULTS:
: #<synth: tgrains-line-synth>


Plays almost exactly like regular track
#+BEGIN_SRC clojure
(def gold-line (tgrains-line-synth :mult 5))
#+END_SRC

#+RESULTS:
: #'user/gold-line

#+BEGIN_SRC clojure
(def yanc-line (tgrains-line-synth :buffer 1 :mult 4))
#+END_SRC

#+RESULTS:
: #'user/yanc-line
** more complicated granular synth playack (use 't-rand')
#+BEGIN_SRC clojure
  (defsynth general-trand-synth
    "stochastic granular synthesis abstraction (in stereo!)"
    [buffer 0 trate 1 dur-numerator 12 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator trate)
          clk (impulse:kr trate)
          centerpos (+ centerpos (t-rand:kr 0 0.1 clk))]
      (out 0 (pan2 
              (t-grains:ar 1      ;; num of channels in the output?
                           clk    ;; aka 'trigger-rate'
                           buffer ;; number of buffer passed in
                           1      ;; playback "speed" of grain
                           centerpos ;;
                           dur    ;; length of grain
                           0      ;; pan
                           amp    ;; amplitude
                           2      ;; interpolation type
                           )))))
#+END_SRC

#+RESULTS:
: #<synth: general-trand-synth>

#+BEGIN_SRC clojure
(def gold-rand (general-trand-synth 0))
(def yanc-rand (general-trand-synth 1))
#+END_SRC

#+RESULTS:
: #'user/gold-rand#'user/yanc-rand

#+BEGIN_SRC clojure
(def gold-rand (general-trand-synth2 0))
(def yanc-rand (general-trand-synth2 1))
#+END_SRC

#+RESULTS:
: #'user/gold-rand#'user/yanc-rand

#+BEGIN_SRC clojure
  (on-event [:midi :control-change]
            (old-reset-knob gold-rand :amp 2 cc2-1 1 :scale 0.01)
            ::old-amp-knob2-gold-rand)

  (on-event [:midi :control-change]
            (old-reset-knob gold-rand :centerpos 1 cc1-1 1 :scale 0.5)
            ::old-centerpos-knob1-gold-rand)

  (on-event [:midi :control-change]
            (old-reset-knob yanc-rand :amp 6 cc5-1 1 :scale 0.01)
            ::old-amp-knob2-yanc-rand)

  (on-event [:midi :control-change]
            (old-reset-knob yanc-rand :centerpos 5 cc6-1 1 :scale 0.5)
            ::old-centerpos-knob1-yanc-rand)
#+END_SRC

#+RESULTS:
: :added-async-handler:added-async-handler:added-async-handler:added-async-handler

#+BEGIN_SRC clojure
  (on-event [:midi :note-on]
            (old-swap-pad yanc-rand :centerpos 38 pad3-1 inc 1)
            ::yanc-randey-centerpos-pad3-inc)

  (on-event [:midi :note-on]
            (old-swap-pad yanc-rand  :centerpos 39 pad3-1 dec 1)
            ::yanc-randey-centerpos-pad4-dec)

  (on-event [:midi :note-on]
            (old-swap-pad yanc-rand  :dur-numerator 36 pad1-1 inc 1)
            ::yanc-randey-durnumerator-pad1-inc)

  (on-event [:midi :note-on]
            (old-swap-pad yanc-rand  :dur-numerator 37 pad1-1 dec 1)
            ::yanc-randey-durnumerator-pad2-inc)

  (on-event [:midi :note-on]
            (old-swap-pad gold-rand :centerpos 42 pad7-1 inc 1)
            ::gold-rand-centerpos-pad7-inc)

  (on-event [:midi :note-on]
            (old-swap-pad gold-rand :centerpos 43 pad7-1 dec 1)
            ::gold-rand-centerpos-pad8-dec)

  (on-event [:midi :note-on]
            (old-swap-pad gold-rand  :dur-numerator 40 pad5-1 inc 1)
            ::gold-rand-durnumerator-pad5-inc)

  (on-event [:midi :note-on]
            (old-swap-pad gold-rand  :dur-numerator 41 pad5-1 dec 1)
            ::gold-rand-durnumerator-pad6-dec)
#+END_SRC

#+RESULTS:
: :added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler:added-async-handler

#+BEGIN_SRC clojure
(remove-event-handler ::yancey-amp-knob2)
(remove-event-handler ::yancey-centerpos-knob1)
(remove-event-handler ::yancey-centerpos-pad3-inc)
(remove-event-handler ::yancey-centerpos-pad4-dec)
(remove-event-handler ::yancey-durnumerator-pad1)
(remove-event-handler ::yancey-durnumerator-pad2)
(remove-event-handler ::yancey-trate-pad7-inc)
(remove-event-handler ::yancey-trate-pad8-dec)
#+END_SRC

#+BEGIN_SRC clojure
  (defsynth general-trand-synth2
    "stochastic granular synthesis abstraction (in stereo!)"
    [buffer 0 trate 1 dur-numerator 12 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator (+ trate (t-rand:kr 0 0.1 (impulse:kr trate))))
          clk (impulse:kr (+ trate (t-rand:kr 0 0.1 (impulse:kr trate))))
          centerpos (+ centerpos (t-rand:kr 0 0.1 clk))]
      (out 0 (pan2 
              (t-grains:ar 1      ;; num of channels in the output?
                           clk    ;; aka 'trigger-rate'
                           buffer ;; number of buffer passed in
                           1      ;; playback "speed" of grain
                           centerpos ;;
                           dur    ;; length of grain
                           0      ;; pan
                           amp    ;; amplitude
                           2      ;; interpolation type
                           )))))
#+END_SRC

#+RESULTS:
: #<synth: general-trand-synth2>

* misc. project utilities
** remove some event handlers for yancey and goldberg 
#+BEGIN_SRC clojure
(remove-event-handler ::old-amp-knob2-yanc)
(remove-event-handler ::old-centerpos-knob1-gold)
(remove-event-handler ::old-centerpos-knob1-yanc)
(remove-event-handler ::old-amp-knob2-yanc)

(remove-event-handler ::yancey-centerpos-pad3-inc)
(remove-event-handler ::yancey-centerpos-pad4-dec)
(remove-event-handler ::yancey-durnumerator-pad1-inc)
(remove-event-handler ::yancey-durnumerator-pad2-dec) ;; switch to dec

(remove-event-handler ::gold-centerpos-pad7-inc)
(remove-event-handler ::gold-centerpos-pad8-dec)
(remove-event-handler ::gold-durnumerator-pad5-inc)
(remove-event-handler ::gold-durnumerator-pad6-dec)

#+END_SRC

#+RESULTS:
: :handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed:handler-removed
