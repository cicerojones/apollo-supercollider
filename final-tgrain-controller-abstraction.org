* Misc. notes and tangents on tgrain project
** [#B] (fun!) create JVM timings using Sleeps and future?
*** process for functioning automated playback fn
**** choose buffer for playback
#+BEGIN_SRC clojure :results silent
(def var1 (general-tgrains-synth 0))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def var2 (general-tgrains-synth 1))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def apoth (general-tgrains-synth 2))
#+END_SRC
**** experiment with ctl of playing back buffer
#+BEGIN_SRC clojure :results silent
(ctl var1 :centerpos 10)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl var1 :centerpos @current-val)
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (do (swap! current-val inc)
      (ctl var1 :centerpos @current-val))
#+END_SRC


#+BEGIN_SRC clojure :results silent
  (do (Thread/sleep 5000)
      (swap! current-val inc)
      (ctl var1 :centerpos @current-val))
#+END_SRC

**** [#A] create functions and futures for repeated control
***** warnings
Sample must be playing, of course!

Then, you can either call the function or try to realize the future?
But doing so in the REPL will, of course, block. But doing so from
org-babel will nrepl time-out and give you back control of your org
file.

However! It will eat your connection to the cider-repl until...?

Reconsider calling the below with repeatedly 200 times!

For example, this will take 200 * 5 seconds = 1000 seconds = approx 16
mins but will keep on moving through the piece?

#+BEGIN_SRC clojure :results silent
;; will block the REPL!
;; use a future??
  (defn play-var1 []
    (repeatedly 200 #(do (Thread/sleep 5000)
                        (swap! current-val inc)
                        (ctl var1 :centerpos @current-val))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(play-var1)
#+END_SRC

***** does using a future do anything helpful?

Futures block once they are dereferenced, it seems?

#+BEGIN_SRC clojure
  (def var2-future
    (future 
      (repeatedly 10 #(do (Thread/sleep 5000)
                           (swap! current-val inc)
                           (ctl var2 :centerpos @current-val)))))
#+END_SRC

#+RESULTS:
: #'user/var2-future

#+BEGIN_SRC clojure :results silent
;; need to reset current-val if previously used!
(def current-val (atom 0))

#+END_SRC

#+BEGIN_SRC clojure :results silent
@var2-future
#+END_SRC

***** abstract out number of repeats and "active-synth"
Hard codes "current val" necessarily, since that is the var we will be
wanting to save values from??

 #+BEGIN_SRC clojure :results silent
  (defn my-ctl-line [active-synth sleep-time repeats]
    (repeatedly repeats
                #(do (Thread/sleep sleep-time)
                     (swap! current-val inc)
                     (ctl active-synth :centerpos @current-val))))
#+END_SRC

#+BEGIN_SRC clojure :results silent
  (do
    (def apoth (general-tgrains-synth 2 :trate 0.5))
    (reset! current-val 0)
    (my-ctl-line apoth 3000 10))
#+END_SRC
** preliminaries
:PROPERTIES:
:ID:       72B246E0-F6CF-4AC8-8113-C1CE8F83572B
:END:
[[id:F50F4B96-20C5-4F82-A29D-88791760D5F5][load all apollo soundfiles into overtone]]
** refactor event handlers!
*** TODO for refactoring keyboard and CC event-handlers
- to take synth ugen as argument--must be a macro??
- print out message with value to STOUT
- fix "no matching clause" errors for (15,
- be able to add and remove event-handlers more gracefully
*** MASTER CONTROL-CHANGE EVENT HANDLER needed!
Saves values of =current-val= for use as =centerpos= arguments

see [[id:D5F733E4-1698-40FB-8B24-D634FD7B39A5][general CC mesages]] above

* define synths (taken from =granular-synth-focused.org=)
:PROPERTIES:
:ID:       94621238-5BF8-497B-96CE-8E1CB951311A
:END:
see below
[[file:~/Github-repos/post-tonal-overtone/src/post_tonal_overtone/org_files/simplest-org-documentation/granular-synth-focused.org][file:~/Github-repos/post-tonal-overtone/src/post_tonal_overtone/org_files/simplest-org-documentation/granular-synth-focused.org]]
** new general-tgrains-synth
*** definition
#+BEGIN_SRC clojure :results silent
  (defsynth general-tgrains-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0]
    (let [trate trate
          dur (/ dur-numerator trate)
          clk (impulse:ar trate)
          centerpos centerpos]
      (out 0 (pan2 (t-grains:ar 1 clk buffer 1 centerpos dur 0 amp 2)))))
#+END_SRC
*** arguments comprise: buff trate dur-num amp centerpos
** tgrains-line
#+BEGIN_SRC clojure :results silent
  (defsynth tgrains-line-synth [buffer 0 trate 1 dur-numerator 8 amp 0.8 centerpos 0 duration-mult 2]
    (out 0 (pan2
            (let [track-len (buf-dur:kr buffer)
                  trate trate
                  dur (/ dur-numerator trate)
                  clk (impulse:ar trate)
                  centerpos (line:kr centerpos track-len (* duration-mult track-len))  ]
              (t-grains:ar 1 clk buffer 1 centerpos dur 0 amp 2)))))
#+END_SRC
** slow-grain-reverb
[[id:F109AE32-4289-4A8B-8637-B68D7B4FA5B6][SLOW-GRAIN-REVERB: dedicated instrument abstraction for t-grains synths]]

from granular-synth focused 
** general-trand synth
[[id:74504A58-C963-4B11-AEE5-6411D5A37CF4][general-tgrains with t-randomness]]
** some new granular synths in steps.org
 mouse-rand-grain1 and more better below this one!
[[id:6846EBE5-14EA-4655-8855-1F674FCBAB1D][mouse-rand-grain1]]
* load samples with various synths
** load all other apollo samples--see link
[[id:C99A4AE2-B22E-4F21-88B8-E64B3CC4D6E2][load all apollo soundfiles into overtone]]
** general-tgrains
#+BEGIN_SRC clojure
;; if not already loaded
  (def goldberg-slow (load-sample "/Users/b/Google Drive/Audio_uploads/wav-file-uploads/goldberg-slow-mono.wav"))


#+END_SRC

#+RESULTS:
: #'user/goldberg-slow#'user/gold

#+BEGIN_SRC clojure :results silent
;; what's in the 11th buffer?
(def gold (general-tgrains-synth goldberg-slow))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def var1 (general-tgrains-synth 0))
#+END_SRC
** tgrains-line 
[[id:326223F4-AA19-4058-A07C-3E5F5DB9AFF5][use lines and scaling and more MIDI buttons]]

#+BEGIN_SRC clojure
(def var1-line (tgrains-line-synth :buffer goldberg-slow :mult 1))
#+END_SRC

#+RESULTS:
: #'user/var1-line

#+BEGIN_SRC clojure :results silent
(def var3-line (tgrains-line-synth :buffer 7 :mult 1))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(ctl var2-line :buffer 7 :centerpos 0)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl var1-line :trate 2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl var2-line :trate 1)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl var1-line :duration-mult 1)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl var2-line :dur-numerator 2)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def var1-noline (general-tgrains-synth :buffer 0 :centerpos 1))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl var1-noline :centerpos (line:kr 0 4 20 FREE))
#+END_SRC
** slow-grain examples

#+BEGIN_SRC clojure :results silent
(def slowg-pasdeux (slow-grain-reverb :b 8))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(ctl slowg-pasdeux :centerpos 10)
#+END_SRC
* [#B] define refs (for full composing with high-level granular synth)
:PROPERTIES:
:ID:       EEC0B1AC-D5F4-40F8-ACDF-629441E38812
:END:
These refs are used by...which event handlers???
** all refs in one block

#+BEGIN_SRC clojure :results silent
;;; save "centerpos" values
  (def liked-values (atom []))

;;; use current-val to hold current 'centerpos' value
  (def current-val (atom 0))

;;; use cc knob to change high point of maprange destination value
  (def dst-lo (atom 0.01))

  (def dst-hi (atom 1))

;;; determine trate value
  (def trate-ref (atom 1))

;;; determine dur-numerator for tgrains duration
  (def durnumerator-ref (atom 8))
#+END_SRC
** break down of refs
- liked-values :: save =centerpos= values
- current-val :: holds current =centerpos= value
- dst-hi :: set endpoint of maprange value (for fine grain control
     with keyboard centerpos triggering
- trate-ref :: set rate of trigger of grains
- durnumerator-ref :: 

* [#B] define utility and library functions
** record-val (to 'liked-values' ref); my maprange; round2; read-ugen

#+BEGIN_SRC clojure
  ;; hard codes in ref for "liked-values"
  (defn record-val [place]
    (swap! liked-values conj (deref place)))

(defn maprange [[a1 a2] [b1 b2] s]
	(+ b1 (/ (* (- s a1) (- b2 b1)) (- a2 a1))))

;; in more recent versions of overtone?
(defn round2
  "Round a double to the given precision (number of significant digits)"
  [precision d]
  (let [factor (Math/pow 10 precision)]
    (/ (Math/round (* d factor)) factor)))

(defmacro read-ugen [dur ugen]
`(run ~dur (poll:kr (impulse:kr 2) ~ugen)))
#+END_SRC

#+RESULTS:
: #'user/record-val#'user/maprange#'user/read-ugen

** design MIDI interface abstractions and original models of event handlers
*** event handler pad and knob abstractions
See [[id:B859EFB9-72F9-405E-9E1F-A0BF75022781][Set four knobs for amp and centerpos across goldberg and yancey]]
for examples of how to use reset-knob and swap-pad

takes:

- synth :: what active synth are you going to control?
- synth parameter :: pick a given parameter of the particular synth
- knob number :: which knob are you using to control?
- place :: what ref holds the desired values?
- midi-channel :: send messages from one channel or another
- scale :: scale the values being sent from the knob

*** old specific event handlers deprecated?
#+BEGIN_SRC clojure :results silent
  (defn old-reset-knob [synth synth-param knob-number place midi-channel & {:keys [scale]
                                                                        :or {scale 1}}]
      (fn [{knob :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= knob knob-number)
                (do (reset! place (* val scale))
                    (ctl synth (keyword synth-param) (deref place))
                    (println (str synth-param knob-number " : ") (deref place)))))))

  (defn old-swap-pad [synth synth-param pad-number place swap-fn midi-channel]
      (fn [{pad :note val :velocity chan :channel}]
        (if (= chan midi-channel)
          (cond (= pad pad-number)
                (do (swap! place swap-fn)
                    (ctl synth (keyword synth-param) (deref place))
                    (println (str synth-param pad-number " : ") (deref place)))))))
#+END_SRC
** keyboard keys and transport event handlers, with scaling (hard codes synth!)
:PROPERTIES:
:ID:       5B64A0AA-C2B5-468A-A39F-4DC5D3EF55D0
:END:
*** SAVE VALUES event handler
:PROPERTIES:
:ID:       D5F733E4-1698-40FB-8B24-D634FD7B39A5
:END:

Problems result from using =case= /but not covering all cases!/
#+BEGIN_SRC clojure
;; save a "liked value" into storage with "record" button
;; return list of "liked values" with "play" button
  (on-event [:midi :control-change]
            (fn [{cc-channel :note vel :velocity}]
              (case vel
                127
                (case cc-channel 
                  18 (record-val current-val)
                  17 (println (deref liked-values))
                  :else nil)
                0 nil))
            ::record-value-handler)

#+END_SRC
*** CHANGE DST-HI RANGE event handler
#+BEGIN_SRC clojure :results silent
;; determine maprange's destination high point, thus changing maprange's scale
  (on-event [:midi :control-change]
            (fn [{note :note val :velocity}]
              (cond (= note 2) (do (reset! dst-hi val)
                                   (println "dst-hi: " @dst-hi))))
            ::test-range-high)


#+END_SRC

#+RESULTS:
: :added-async-handler:added-async-handler
*** remove above event handlers
#+BEGIN_SRC clojure :results silent
(remove-event-handler ::record-value-handler)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::test-range-high)
#+END_SRC

*** example of controlling playback of synth saved in =gold= only!

**** control centerpos with note-on
#+BEGIN_SRC clojure
;; determine "centerpos" based on MIDI keyboard notes
  (on-event [:midi :note-on]
            (fn [{note :note}]
              (let [val (deref current-val)]
                (do (reset! current-val (maprange [60 91] [0.0 @dst-hi] note))
                    (ctl gold :centerpos val)
                    (println (round2 val 2)))))
            ::set-current-val-scale-and-play)
#+END_SRC

**** control trate with knob 3
#+BEGIN_SRC clojure :results silent
;; determine trate 
  (on-event [:midi :control-change]
            (fn [{note :note vel :velocity}]
              (cond (= note 3)
                    (do (reset! trate-ref vel)
                        (ctl gold :trate (maprange [0 127] [0.01 2] vel))
                        (println vel))))
            ::set-trate-and-play)
#+END_SRC

**** control dur-numerator with knob 4
#+BEGIN_SRC clojure :results silent
;; determine dur-numerator
  (on-event [:midi :control-change]
            (fn [{note :note vel :velocity}]
              (cond (= note 4)
                    (do (reset! durnumerator-ref vel)
                        (ctl gold :dur-numerator (maprange [0 127] [1 20] vel))
                        (println vel))))
            ::set-durnum-and-play)
#+END_SRC

* [#A] note-on ON-EVENTER (note-on event handler for ANY active synth!)
** some notes on the function

- Should be "note-on-eventer" with more explanation
- hard-codes =current-val= as the "centerpos determiner" value
- hard-codes =dst-hi= for the maprange hi
  - should make some use of buffer-duration??
  - where are these refs set?
    - [[id:EEC0B1AC-D5F4-40F8-ACDF-629441E38812][define refs (for full composing with high-level granular synth)]]
  - where are the controls for =dst-hi= exactly?
    - event-handler ::test-range-high
      - [[id:5B64A0AA-C2B5-468A-A39F-4DC5D3EF55D0][keyboard keys and transport event handlers, with scaling (hard codes synth!)]]
- raises errors when the synth it is defined for is "inactive"?
  - must manually remove event handler in that case?
  - or is this a problem from somewhere else?
- octave of keyboard must be appropriately set!

** function definition
#+BEGIN_SRC clojure :results silent
;; determine "centerpos" based on MIDI keyboard notes

(defn note-on-eventer [active-synth handler-double-colon-name]
  (on-event [:midi :note-on]
            (fn [{note :note}]
              (let [val (deref current-val)]
                (do (reset! current-val (maprange [60 91] [0.0 @dst-hi] note))
                    (ctl active-synth :centerpos val)
                    (println (str "centerpos (via dst-hi): " (round2 val 2))))))
            handler-double-colon-name))



#+END_SRC

** instantiate general-tgrains for note-on-eventer control
Step 1. Must activate a synth
Step 2. Begin to control with with the note-on-eventer
#+BEGIN_SRC clojure :results silent
(def var1-noline (general-tgrains-synth :buffer 0 :centerpos 1))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(def var2-noline (general-tgrains-synth :buffer 1 :centerpos 1))
#+END_SRC

#+BEGIN_SRC clojure :results silent
;; (note-on-eventer var2-noline ::no-liner)
;;
(note-on-eventer var1-noline ::no-liner)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::no-liner)
#+END_SRC

* [#A] cc-change ON-EVENTER
** prepare to define function 
   :PROPERTIES:
   :ID:       254BF7C9-931F-4E30-AEC6-05990B46BE41
   :END:
Can set any ref to be used with any knob-num!
Refs all come with a "-ref" name ending!

Needs an active-synth! (That is making use of that ref's value?)

#+BEGIN_SRC clojure :results silent
  (defn cc-on-eventer-printer [a-ref knob-num double-colon-name]
    (on-event [:midi :control-change]
              (fn [{note :note val :velocity}]
                (cond (= note knob-num) 
                      (do (reset! a-ref val)
                          (println (str double-colon-name ": " (deref a-ref))))))
              double-colon-name))
#+END_SRC

** create and remove handler
#+BEGIN_SRC clojure :results silent
(cc-on-eventer dst-hi 3 ::dst-hi-change)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::dst-hi-change)
#+END_SRC

** control trate with cc-on-eventer
By hard coding range values, it suggests you are building in a
specific use for this event-handler!

#+BEGIN_SRC clojure :results silent
  (defn cc-trate-on-eventer [active-synth a-ref knob-num double-colon-name]
    (on-event [:midi :control-change]
              (fn [{note :note vel :velocity}]
                (let [val (deref a-ref)]
                  (cond (= note knob-num) 
                        (do (reset! a-ref (maprange [0 127] [0.01 2] vel))
                            (ctl active-synth :trate (deref a-ref))
                            (println (str double-colon-name ": " (round2 val 2) " => " (round2 (deref a-ref) 2)))))))
                double-colon-name))
#+END_SRC


#+BEGIN_SRC clojure :results silent
(cc-trate-on-eventer var1-noline trate-ref 1 ::var1-trate-change)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::var1-trate-change)
#+END_SRC

* more general CC handler with defmacro
  :PROPERTIES:
  :ID:       18034CBE-5093-4083-8D7A-5E7027482FA4
  :END:
#+BEGIN_SRC clojure :results silent
  (defmacro cc-param-on-eventer [active-synth a-ref tgrain-param knob-num dst-lo-ref dst-hi-ref double-colon-name]
    (on-event [:midi :control-change]
              (fn [{note :note vel :velocity}]
                (let [val (deref a-ref)
                      dstlo (deref dst-lo-ref) 
                      dsthi (deref dst-hi-ref)]
                  (cond (= note knob-num) 
                        (do (reset! a-ref (maprange [0 127] [dstlo dsthi] vel))
                            (ctl active-synth (keyword tgrain-param) (deref a-ref))
                            (println (str double-colon-name ": " (round2 val 2) " => " (round2 (deref a-ref) 2)))))))
              double-colon-name))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(cc-param-on-eventer var1-noline trate-ref trate 1 dst-lo dst-hi ::more-general-trate-scaled)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::more-general-trate-scaled)
#+END_SRC
** model definitions for refactoring as more abstract
#+BEGIN_SRC clojure :results silent
  (defn cc-param-on-eventer1 [active-synth knob-num double-colon-name]
    (on-event [:midi :control-change]
              (fn [{note :note vel :velocity}]
                  (cond (= note knob-num) 
                        (do (reset! @trate-ref (maprange [0 127] [0.01 1 ] vel))
                            (ctl active-synth :tgrain @trate-ref)
                            (println (str double-colon-name ": " (round2 (deref trate-ref) 2) " => " (round2 (deref trate-ref) 2))))))
              double-colon-name))
#+END_SRC

#+BEGIN_SRC clojure :results silent
(cc-param-on-eventer1 var1-noline 1 ::simpler-hardcoded-cc)
#+END_SRC

#+BEGIN_SRC clojure :results silent
(remove-event-handler ::simpler-hardcoded-cc)
#+END_SRC



